#+TITLE: Conf.org
#+AUTHOR: Michal Atlas

#+PROPERTY: HEADER-ARGS :comments both :tangle-mode (identity #o444) :mkdirp yes
#+STARTUP: content

* Emacs
  :PROPERTIES:
  :HEADER-ARGS+: :tangle ~/.emacs.d/init.el :tangle-mode (identity #o644)
  :END:
** Packaging Bootstrap

   #+BEGIN_SRC emacs-lisp

     (require 'package)
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
     (package-initialize)

     (package-install 'use-package)

     (eval-when-compile
       (unless (package-installed-p 'quelpa)
	 (with-temp-buffer
	   (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
	   (eval-buffer)
	   (quelpa-self-upgrade)))
       (require 'quelpa)
       (quelpa
	'(quelpa-use-package
	  :fetcher git
	  :url "https://github.com/quelpa/quelpa-use-package.git"))
       (require 'quelpa-use-package)
       (require 'use-package))

     (require 'bind-key)

     (require 'use-package-ensure)
     (setq use-package-always-ensure t)

     (use-package auto-package-update
       :config
       (setq auto-package-update-delete-old-versions t)
       (setq auto-package-update-hide-results t)
       (auto-package-update-maybe))

       #+END_SRC
** Variable Init
   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
     ;; (setq user-full-name "Michal Atlas"
     ;;       user-mail-address "michal.z.atlas@gmail.com")
     (setq user-full-name "Michal Žáček"
	   user-mail-address "zacekmi2@fit.cvut.cz")

     (setq backup-directory-alist '((".*" . "~/.emacs.d/bkp")))
     (setq projectile-project-search-path (list "~/Documents" "~/source"))
     (setq calendar-week-start-day 1)
     (setq org-agenda-start-on-weekday 1)
     (setq find-function-C-source-directory "~/source/emacs")
     (global-auto-revert-mode 1)
     (recentf-mode 1)
     (setq visible-bell t)
     (setq recentf-max-menu-items 25)
     (setq recentf-max-saved-items 25)
     (global-set-key "\C-x\ \C-r" 'recentf-open-files)
     (run-at-time nil (* 10 60) 'recentf-save-list)
     ;; Variable Init:1 ends here

     (defun yes-or-no-p (prompt) (y-or-n-p prompt))

#+END_SRC
** Theming
 #+BEGIN_SRC emacs-lisp

 (tool-bar-mode -1)
 (menu-bar-mode -1)
 (scroll-bar-mode -1)
 (show-paren-mode 1)
 (column-number-mode 1)

 (global-display-line-numbers-mode)
 (global-hl-line-mode 1)

 (use-package highlight-indentation
 :hook (prog-mode . highlight-indentation-mode)
 :custom (highlight-indent-guides-method 'bitmap))

 ; (set-frame-font "Fira Code-11" nil t)
 ; (add-to-list 'default-frame-alist '(font . "Fira Code-11"))

#+END_SRC
** Packages
#+BEGIN_SRC emacs-lisp
(use-package flycheck)

;; Magit

(use-package magit
:bind (("C-c v s" . magit-stage)
("C-c v p" . magit-push)
("C-c v f" . magit-pull)
("C-c v c" . magit-commit)))

(use-package zerodark-theme
:config (load-theme 'zerodark t)
(zerodark-setup-modeline-format))
(use-package solaire-mode
:config (solaire-global-mode +1))
(use-package which-key
:config (which-key-mode))
(setq which-key-popup-type 'minibuffer)



(use-package rainbow-identifiers
:hook (prog-mode . rainbow-identifiers-mode))
(use-package rainbow-delimiters
:hook (prog-mode . rainbow-delimiters-mode))

(set-default 'preview-scale-function 1.5)

(use-package undo-tree
:config (global-undo-tree-mode 1)
(setq undo-tree-auto-save-history t)
(setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))))

;; (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
;; (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling 
;; (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
;; (setq scroll-conservatively 10000)
;; (setq auto-window-vscroll nil)
;; (setq scroll-conservatively 10000)

;; (guix-prettify-global-mode +1)

(use-package aggressive-indent)

#+END_SRC
*** Eshell
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load "esh-opt"
	(autoload 'epe-theme-lambda "eshell-prompt-extras")
	(setq eshell-highlight-prompt nil
	      eshell-prompt-function 'epe-theme-lambda))

      (defun eshell-new()
	"Open a new instance of eshell."
	(interactive)
	(eshell 'N))

      (use-package eshell-z)
      (add-hook 'eshell-mode-hook
		(defun my-eshell-mode-hook ()
		  (require 'eshell-z)))

      (require 'eshell)
      (use-package eshell-syntax-highlighting
	:config (eshell-syntax-highlighting-global-mode 1))
      (setq eshell-review-quick-commands nil)
      (require 'esh-module) ; require modules
      (add-to-list 'eshell-modules-list 'eshell-tramp)
      (use-package esh-autosuggest
      :hook (eshell-mode . esh-autosuggest-mode))

#+END_SRC
*** LSP
    #+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
    :bind ("C-c c" . compile)
    :custom (lsp-keymap-prefix "C-c l")
    :hook (lsp-mode . lsp-enable-which-key-integration))

    (global-set-key (kbd "C-c o c") 'cfw:open-calendar-buffer)

    (add-hook 'dired-mode-hook #'all-the-icons-dired-mode)
 
    (use-package git-gutter
    :config (global-git-gutter-mode +1))
    (use-package org-fragtog
    :config (add-hook 'org-mode-hook #'org-fragtog-mode))
    (use-package org-modern
    :config (global-org-modern-mode))
#+END_SRC
*** Vertico
    #+BEGIN_SRC emacs-lisp
      (use-package vertico
	:init
	(vertico-mode)

	;; Different scroll margin
	(setq vertico-scroll-margin 0)

	;; Show more candidates
	(setq vertico-count 20)

	;; Grow and shrink the Vertico minibuffer
	(setq vertico-resize t)

	;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
	(setq vertico-cycle t)
	)

      ;; Persist history over Emacs restarts. Vertico sorts by history position.
      (use-package savehist
	:init
	(savehist-mode))

      ;; A few more useful configurations...
      (use-package emacs
	:init
	;; Add prompt indicator to `completing-read-multiple'.
	;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
	(defun crm-indicator (args)
	  (cons (format "[CRM%s] %s"
			(replace-regexp-in-string
			 "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
			 crm-separator)
			(car args))
		(cdr args)))
	(advice-add #'completing-read-multiple :filter-args #'crm-indicator)

	;; Do not allow the cursor in the minibuffer prompt
	(setq minibuffer-prompt-properties
	      '(read-only t cursor-intangible t face minibuffer-prompt))
	(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

	;; Emacs 28: Hide commands in M-x which do not work in the current mode.
	;; Vertico commands are hidden in normal buffers.
	;; (setq read-extended-command-predicate
	;;       #'command-completion-default-include-p)

	;; Enable recursive minibuffers
	(setq enable-recursive-minibuffers t))

      ;; Optionally use the `orderless' completion style.
      (use-package orderless
	:init
	;; Configure a custom style dispatcher (see the Consult wiki)
	;; (setq orderless-style-dispatchers '(+orderless-dispatch)
	;;       orderless-component-separator #'orderless-escapable-split-on-space)
	(setq completion-styles '(orderless basic)
	      completion-category-defaults nil
	      completion-category-overrides '((file (styles partial-completion)))))

      (use-package anzu
	:config (global-anzu-mode +1)
	:bind (("M-%" . anzu-query-replace)
	       ("C-M-%" . anzu-query-replace-regexp)))

#+END_SRC
*** Org-mode
    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '(
	 (dot . t)
	 (C . t)
	 (shell . t)
	 (scheme . t)
	 ))

      (use-package marginalia
	:config (marginalia-mode))

#+END_SRC
*** Langs
    #+BEGIN_SRC emacs-lisp
      ;; Lisps

      (use-package auto-complete
	:config (ac-config-default))
      (add-hook 'geiser-mode-hook 'ac-geiser-setup)
      (add-hook 'geiser-repl-mode-hook 'ac-geiser-setup)
      (add-to-list 'ac-modes' geiser-repl-mode)

      (load (expand-file-name "~/quicklisp/slime-helper.el"))

      (add-hook 'common-lisp-mode-hook #'slime-mode)
      (add-hook 'scheme-mode-hook #'geiser-mode)

      (use-package paredit
	:config (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
	:hook ((emacs-lisp-mode . enable-paredit-mode)
	       (eval-expression-minibuffer-setup . enable-paredit-mode)
	       (ielm-mode . enable-paredit-mode)
	       (lisp-mode . enable-paredit-mode)
	       (lisp-mode . aggressive-indent-mode)
	       (lisp-interaction-mode . enable-paredit-mode)
	       (scheme-mode . enable-paredit-mode)
	       (common-lisp-mode . enable-paredit-mode)))
      (add-hook 'slime-repl-mode-hook (lambda () (paredit-mode +1)))

      (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
      (global-set-key (kbd "C->") 'mc/mark-next-like-this)
      (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
      (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

      ;; C

      (add-hook 'c-mode-hook #'irony-mode)
      (add-hook 'c-mode-hook #'lsp)
      (add-hook 'c++-mode-hook #'irony-mode)
      (add-hook 'c++-mode-hook #'lsp)
      (add-hook 'irony-mode-hook #'irony-cdb-autosetup-compile-options)

      (add-hook 'irony-mode-hook #'irony-eldoc)

      (add-hook 'shell-script-mode 'prog-mode)

#+END_SRC
*** Elfeed
   #+BEGIN_SRC emacs-lisp
     (setq elfeed-feeds
	   '(("https://xkcd.com/rss.xml" comics)
	     ("https://www.smbc-comics.com/comic/rss" comics)
	     ("https://www.giantitp.com/comics/oots.rss" comics)
	     ("https://feeds.feedburner.com/LookingForGroup" comics)
	     ("https://www.oglaf.com/" comics)
	     ("http://phdcomics.com/gradfeed.php" comics)
	     ("https://blog.tecosaur.com/tmio/rss.xml" emacs)
	     ("https://akce.cvut.cz/?node=rss&group=7" ctu)
	     ("https://akce.cvut.cz/?node=rss&group=11" ctu)
	     ("https://aktualne.cvut.cz/rss/newsflashes" ctu)
	     ("http://festivalofthespokennerd.libsyn.com/rss" podcast)
	     ("https://konfery.cz/rss/")
	     ("https://guix.gnu.org/feeds/blog.atom")))

     (provide 'init)

#+END_SRC
*** Misc
   #+BEGIN_SRC emacs-lisp
     (use-package equake
       :quelpa (equake :fetcher gitlab :repo "emacsomancer/equake")
       ;; some examples of optional settings follow:
       :custom
       ;; set width a bit less than full-screen (prevent 'overflow' on multi-monitor):
       (equake-size-width 0.99)
       ;; set distinct face for Equake: white foreground with dark blue background, and different font:
       :config
       ;; prevent accidental frame closure:
       (advice-add #'save-buffers-kill-terminal :before-while #'equake-kill-emacs-advice)
       ;; binding to restore last Equake tab when viewing a non-Equake buffer
       (global-set-key (kbd "C-M-^") #'equake-restore-last-etab)
       ;; set default shell
       (setq equake-default-shell 'eshell)
       ;; set list of available shells
       (setq equake-available-shells
	     '("shell"
	       "vterm"
	       "rash"
	       "eshell")))



     (use-package tex
       :ensure auctex)

     (use-package helpful
       :bind (("C-h f" . helpful-function)
	      ("C-h k" . helpful-key)))

     (use-package crux)
     (use-package lsp-ui)
     (use-package magit-todos)
     (use-package adaptive-wrap)
     (use-package pdf-tools)
     (use-package avy)
     (use-package org-present)
     (use-package embark)
     (use-package consult)
     (use-package elpher)
     (use-package multiple-cursors)
     (use-package on-screen)
     (use-package notmuch)
     (use-package tldr)
     (use-package direnv)
     (use-package kana
       :quelpa
       (kana :repo "chenyanming/kana" :fetcher github))
     (use-package circe)
     (use-package browse-kill-ring
       :config (browse-kill-ring-default-keybindings))
     (use-package realgud)
     (use-package gdscript-mode)
     (use-package emms)
#+END_SRC

   # Local Variables:
   # after-save-hook: org-babel-tangle
   # End:
