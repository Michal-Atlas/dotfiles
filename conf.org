# -*- after-save-hook: org-babel-tangle -*-
#+TITLE: CONF.ORG
#+AUTHOR: Michal Atlas

#+PROPERTY: HEADER-ARGS :comments both :tangle-mode (identity #o444) :mkdirp yes
#+STARTUP: overview

* ZSH
  :PROPERTIES:
  :HEADER-ARGS+: :tangle zsh/.zshrc
  :END:
  #+BEGIN_SRC sh
export PATH="$PATH:$HOME/.cargo/bin"
export PATH="$PATH:$HOME/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin"
export PATH="$PATH:$HOME/.local/bin"
export PATH="$PATH:$HOME/source/bin"
export PATH="$PATH:$HOME/.emacs.d/bin"
export PATH="$PATH:$HOME/.npm-global/bin"

if type rustc >/dev/null; then
    RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/library"
    export RUST_SRC_PATH
    alias cr='cargo run'
    alias crd='cargo doc --open'
    alias rd='xdg-open (rustup doc --path)'
fi

# shellcheck disable=SC1094
. ~/dotfiles/antigen.zsh && {
    antigen use oh-my-zsh

    plugins=(
        MichaelAquilina/zsh-you-should-use
        RitchieS/zsh-exa@main
        aliases
        colored-man-pages
        common-aliases
        emacs
        extract
        git
        git-auto-fetch
        history
        hlissner/zsh-autopair
        per-directory-history
        rsync
        rust
        rustup
        shrink-path
        ssh-agent
        unixorn/autoupdate-antigen.zshplugin
        web-search
        wfxr/forgit
        zoxide
        zpm-zsh/colorize
        zsh-users/zsh-syntax-highlighting
    )

    for p in $plugins; do
        antigen bundle $p;
    done;

    antigen theme romkatv/powerlevel10k

    antigen apply
}

alias IDDQD='sudo su'
alias IDDT='neofetch'
alias IDMUS='mpv --no-video "https://www.youtube.com/watch?v=Jly9qp40rfw"'

alias rm=rip
alias crontab="crontab -i"
alias paru="paru --sudoloop --skipreview --bottomup"
alias cat=bat
alias pkg="zypper"
alias pkg-s="pkg search"
alias pkg-i="sudo zypper install"

alias q=exit

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
# shellcheck disable=1090
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

  #+END_SRC
* SSH
  :PROPERTIES:
:HEADER-ARGS+: :tangle ssh/.ssh/config
  :END:
  #+begin_src conf
Host *
	AddKeysToAgent yes
Host Elite
	HostName Phoenix-Elite.local
Host Port
	HostName Phoenix-Port.local
Host ZmioSem
	User michal_zacek
	HostName hiccup.mazim.cz
	Port 10169 
Host Myst
	HostName 34.122.2.188
Host Fray1
	User zacekmi2
	HostName fray1.fit.cvut.cz

Host Fray2
	User zacekmi2
	HostName fray2.fit.cvut.cz
#+end_src
* Emacs
  :PROPERTIES:
  :HEADER-ARGS+: :tangle emacs/.emacs.d/init.el :tangle-mode (identity #o644)
  :END:
** Variable Init
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Michal Atlas"
      user-mail-address "michal.z.atlas@gmail.com")

    (setq org-directory "~/Documents/")
    (setq projectile-project-search-path (list "~/Documents" "~/source"))
    (setq org-agenda-files "~/Documents/agenda.list")
    (setq calendar-week-start-day 1)
    (setq org-agenda-start-on-weekday 1)
    (setq find-function-C-source-directory "~/source/emacs")
    (setq rmh-elfeed-org-files (list "~/.elfeed.org"))

#+END_SRC
** Package Bootstrap
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  ;; Bootstrap 'use-package'
  (eval-after-load 'gnutls
    '(add-to-list 'gnutls-trustfiles "/etc/ssl/cert.pem"))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (require 'bind-key)
  (setq use-package-always-ensure t)

  ;; This is only needed once, near the top of the file
  (eval-when-compile
    ;; Following line is not needed if use-package.el is in ~/.emacs.d
    (add-to-list 'load-path "~/.emacs.d/use-package")
    (require 'use-package))

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC
*** Quelpa
    #+BEGIN_SRC emacs-lisp
      ;; Install and load `quelpa-use-package'.
      (package-install 'quelpa-use-package)
      (require 'quelpa-use-package)
    #+END_SRC
** Built-in Keybinds
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c o t") 'vterm)
   #+END_SRC
** Theming
#+BEGIN_SRC emacs-lisp
  ;; in ~/.doom.d/config.el
  (setq doom-theme 'doom-monokai-classic)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (setq default-frame-alist '((set-frame-font "Fira Code 13" nil t)))

  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-monokai-classic t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))


  (use-package solaire-mode)
  (solaire-global-mode +1)

  (use-package which-key
    :config
    (which-key-mode)
    (setq which-key-popup-type 'minibuffer))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (global-display-line-numbers-mode)
  (global-hl-line-mode 1)

  (use-package rainbow-identifiers
    :hook (prog-mode . rainbow-identifiers-mode))
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  (use-package rainbow-blocks
    :hook (prog-mode . rainbow-blocks-mode))
#+END_SRC
** Formatting
#+BEGIN_SRC emacs-lisp
  (use-package format-all
    :hook (prog-mode . format-all-mode))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (company-mode)
    :hook
    (after-init . global-company-mode))
  (use-package flycheck
    :config
    (global-flycheck-mode))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
    (use-package projectile
      :config
      (projectile-mode +1)
      (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
** Treemacs
#+BEGIN_SRC emacs-lisp
    (use-package treemacs
      :ensure t
      :defer t
      :init
      (with-eval-after-load 'winum
	(define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
      :bind
      (:map global-map
	    ("M-0"       . treemacs-select-window)
	    ("C-x t 1"   . treemacs-delete-other-windows)
	    ("C-x t t"   . treemacs)
	    ("C-x t B"   . treemacs-bookmark)
	    ("C-x t C-t" . treemacs-find-file)
	    ("C-x t M-t" . treemacs-find-tag)))

    (use-package treemacs-projectile
      :after (treemacs projectile)
      :ensure t)

    (use-package treemacs-icons-dired
      :hook (dired-mode . treemacs-icons-dired-enable-once)
      :ensure t)

    (use-package treemacs-magit
      :after (treemacs magit)
      :ensure t)

    (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
      :after (treemacs persp-mode) ;;or perspective vs. persp-mode
      :ensure t
      :config (treemacs-set-scope-type 'Perspectives))

#+END_SRC
** Vertico
#+BEGIN_SRC emacs-lisp
    ;; Enable vertico
    (use-package vertico
      :init
      (vertico-mode)

      ;; Different scroll margin
      ;; (setq vertico-scroll-margin 0)

      ;; Show more candidates
      ;; (setq vertico-count 20)

      ;; Grow and shrink the Vertico minibuffer
      ;; (setq vertico-resize t)

      ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
      ;; (setq vertico-cycle t)
      )

    ;; Optionally use the `orderless' completion style. See
    ;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
    ;; dispatcher. Additionally enable `partial-completion' for file path
    ;; expansion. `partial-completion' is important for wildcard support.
    ;; Multiple files can be opened at once with `find-file' if you enter a
    ;; wildcard. You may also give the `initials' completion style a try.
    (use-package orderless
      :init
      ;; Configure a custom style dispatcher (see the Consult wiki)
      ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
      ;;       orderless-component-separator #'orderless-escapable-split-on-space)
      (setq completion-styles '(orderless)
	    completion-category-defaults nil
	    completion-category-overrides '((file (styles partial-completion)))))

    ;; Persist history over Emacs restarts. Vertico sorts by history position.
    (use-package savehist
      :init
      (savehist-mode))

    ;; A few more useful configurations...
    (use-package emacs
      :init
      ;; Add prompt indicator to `completing-read-multiple'.
      ;; Alternatively try `consult-completing-read-multiple'.
      (defun crm-indicator (args)
	(cons (concat "[CRM] " (car args)) (cdr args)))
      (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

      ;; Do not allow the cursor in the minibuffer prompt
      (setq minibuffer-prompt-properties
	    '(read-only t cursor-intangible t face minibuffer-prompt))
      (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

      ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
      ;; Vertico commands are hidden in normal buffers.
      ;; (setq read-extended-command-predicate
      ;;       #'command-completion-default-include-p)

      ;; Enable recursive minibuffers
      (setq enable-recursive-minibuffers t))
#+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'compile)
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	   (c-mode . lsp)
	   ;; if you want which-key integration
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  (use-package dap-mode)
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind (
	     ("C-c v s" . magit-stage)
	     ("C-c v p" . magit-push)
	     ("C-c v f" . magit-pull)
	     ("C-c v c" . magit-commit)
	     ))
     (use-package magit-todos)
   #+END_SRC
** Misc.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t)
  (use-package adaptive-wrap)
  (use-package calfw
    :ensure t)
  (use-package calfw-org
    :ensure t)
  (use-package elfeed)
  (use-package elfeed-org)
  (use-package vimish-fold)
  (use-package diff-hl)
  (use-package diredfl)
  (use-package dired-rsync)
  (use-package ibuffer-projectile)
  (use-package ibuffer-vc)
  (use-package undo-tree)
  (use-package git-timemachine)
  (use-package mu4e-alert
    :hook
    ((after-init . mu4e-alert-enable-notifications)
     (after-init . mu4e-alert-enable-modeline-display)))
  (use-package org-msg)
  (use-package vterm)
  (use-package quickrun)
  (use-package pdf-tools)
  (use-package kurecolor)
  (use-package ranger)
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
  (use-package crux)
  (use-package xkcd)
  (use-package git-gutter
    :config
    (global-git-gutter-mode +1))
  (use-package org-fragtog
    :hook (org-mode . org-fragtog-mode))
  (use-package avy
    :bind
    ("M-q" . avy-goto-word-0))
  (use-package anzu
    :config
    ;; ANZU - Replace Highlighting
    (global-anzu-mode +1)
    :bind
    (("M-%" . anzu-query-replace)
     ("C-M-%" . anzu-query-replace-regexp)))
#+END_SRC
** Org Mode
#+BEGIN_SRC emacs-lisp
    (use-package org-present)
    (use-package ob-async)
    (use-package org-cliplink)
    (use-package org-superstar
      :hook (org-mode . org-superstar-mode))

#+END_SRC
** Marginalia
#+BEGIN_SRC emacs-lisp

    ;; Enable richer annotations using the Marginalia package
    (use-package marginalia
      ;; Either bind `marginalia-cycle` globally or only in the minibuffer
      ;;:bind (("M-A" . marginalia-cycle)
      ;;       :map minibuffer-local-map
      ;;       ("M-A" . marginalia-cycle))

      ;; The :init configuration is always executed (Not lazy!)
      :init

      ;; Must be in the :init section of use-package such that the mode gets
      ;; enabled right away. Note that this forces loading the package.
      (marginalia-mode))
    (use-package all-the-icons-completion
      :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))
#+END_SRC
** Embark and Consult
#+BEGIN_SRC emacs-lisp
    (use-package embark
      :ensure t

      :bind
      (("C-." . embark-act)         ;; pick some comfortable binding
       ("C-;" . embark-dwim)        ;; good alternative: M-.
       ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

      :init

      ;; Optionally replace the key help with a completing-read interface
      (setq prefix-help-command #'embark-prefix-help-command)

      :config

      ;; Hide the mode line of the Embark live/completions buffers
      (add-to-list 'display-buffer-alist
		   '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		     nil
		     (window-parameters (mode-line-format . none)))))

    ;; Consult users will also want the embark-consult package.
    (use-package embark-consult
      :ensure t
      :after (embark consult)
      :demand t ; only necessary if you have the hook below
      ;; if you want to have consult previews as you move around an
      ;; auto-updating embark collect buffer
      :hook
      (embark-collect-mode . consult-preview-at-point-mode))

    ;; Example configuration for Consult
    (use-package consult
      ;; Replace bindings. Lazily loaded due by `use-package'.
      :bind (;; C-c bindings (mode-specific-map)
	     ("C-c h" . consult-history)
	     ("C-c m" . consult-mode-command)
	     ("C-c b" . consult-bookmark)
	     ("C-c k" . consult-kmacro)
	     ;; C-x bindings (ctl-x-map)
	     ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	     ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	     ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	     ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	     ;; Custom M-# bindings for fast register access
	     ("M-#" . consult-register-load)
	     ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	     ("C-M-#" . consult-register)
	     ;; Other custom bindings
	     ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	     ("<help> a" . consult-apropos)            ;; orig. apropos-command
	     ;; M-g bindings (goto-map)
	     ("M-g e" . consult-compile-error)
	     ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	     ("M-g g" . consult-goto-line)             ;; orig. goto-line
	     ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	     ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	     ("M-g m" . consult-mark)
	     ("M-g k" . consult-global-mark)
	     ("M-g i" . consult-imenu)
	     ("M-g I" . consult-imenu-multi)
	     ;; M-s bindings (search-map)
	     ("M-s f" . consult-find)
	     ("M-s F" . consult-locate)
	     ("M-s g" . consult-grep)
	     ("M-s G" . consult-git-grep)
	     ("M-s r" . consult-ripgrep)
	     ("M-s l" . consult-line)
	     ("M-s L" . consult-line-multi)
	     ("M-s m" . consult-multi-occur)
	     ("M-s k" . consult-keep-lines)
	     ("M-s u" . consult-focus-lines)
	     ;; Isearch integration
	     ("M-s e" . consult-isearch-history)
	     :map isearch-mode-map
	     ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	     ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	     ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	     ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

      ;; Enable automatic preview at point in the *Completions* buffer.
      ;; This is relevant when you use the default completion UI,
      ;; and not necessary for Vertico, Selectrum, etc.
      :hook (completion-list-mode . consult-preview-at-point-mode)

      ;; The :init configuration is always executed (Not lazy)
      :init

      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 0
	    register-preview-function #'consult-register-format)

      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)

      ;; Optionally replace `completing-read-multiple' with an enhanced version.
      (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
	    xref-show-definitions-function #'consult-xref)

      ;; Configure other variables and modes in the :config section,
      ;; after lazily loading the package.
      :config

      ;; Optionally configure preview. The default value
      ;; is 'any, such that any key triggers the preview.
      ;; (setq consult-preview-key 'any)
      ;; (setq consult-preview-key (kbd "M-."))
      ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
      ;; For some commands and buffer sources it is useful to configure the
      ;; :preview-key on a per-command basis using the `consult-customize' macro.
      (consult-customize
       consult-theme
       :preview-key '(:debounce 0.2 any)
       consult-ripgrep consult-git-grep consult-grep
       consult-bookmark consult-recent-file consult-xref
       consult--source-file consult--source-project-file consult--source-bookmark
       :preview-key (kbd "M-."))

      ;; Optionally configure the narrowing key.
      ;; Both < and C-+ work reasonably well.
      (setq consult-narrow-key "<") ;; (kbd "C-+")

      ;; Optionally make narrowing help available in the minibuffer.
      ;; You may want to use `embark-prefix-help-command' or which-key instead.
      ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

      ;; Optionally configure a function which returns the project root directory.
      ;; There are multiple reasonable alternatives to chose from.
      ;;;; 1. project.el (project-roots)
      (setq consult-project-root-function
	    (lambda ()
	      (when-let (project (project-current))
		(car (project-roots project)))))
      ;;;; 2. projectile.el (projectile-project-root)
      ;; (autoload 'projectile-project-root "projectile")
      ;; (setq consult-project-root-function #'projectile-project-root)
      ;;;; 3. vc.el (vc-root-dir)
      ;; (setq consult-project-root-function #'vc-root-dir)
      ;;;; 4. locate-dominating-file
      ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
    )

#+END_SRC
** C
   #+BEGIN_SRC emacs-lisp
     (use-package irony
       :hook ((c-mode . irony-mode)
	      (c++-mode . irony-mode)
	      (irony-mode . irony-cdb-autosetup-compile-options)))
     (use-package irony-eldoc
       :hook (irony-mode . irony-eldoc))
   #+END_SRC

** Rust
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       :ensure t)
     (use-package racer
       :hook ((rust-mode . racer-mode)
	      (racer-mode . eldoc-mode)))
   #+END_SRC

** Personal
*** Hackles
    #+BEGIN_SRC emacs-lisp
      (use-package hackles
	:quelpa (hackles :fetcher github :repo "Michal-Atlas/emacs-hackles"))
    #+END_SRC
