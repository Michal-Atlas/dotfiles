# -*- after-save-hook: org-babel-tangle -*-
#+TITLE: CONF.ORG
#+AUTHOR: Michal Atlas

#+PROPERTY: HEADER-ARGS :comments both :tangle-mode (identity #o444) :mkdirp yes
#+STARTUP: overview

* ZSH
  :PROPERTIES:
  :HEADER-ARGS+: :tangle ~/.zshrc
  :END:
  #+BEGIN_SRC sh
export PATH="$PATH:$HOME/.cargo/bin"
export PATH="$PATH:$HOME/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin"
export PATH="$PATH:$HOME/.local/bin"
export PATH="$PATH:$HOME/source/bin"
export PATH="$PATH:$HOME/.emacs.d/bin"
export PATH="$PATH:$HOME/.npm-global/bin"

if type rustc >/dev/null; then
    RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/library"
    export RUST_SRC_PATH
    alias cr='cargo run'
    alias crd='cargo doc --open'
    alias rd='xdg-open (rustup doc --path)'
fi

# shellcheck disable=SC1094
. ~/dotfiles/antigen/antigen.zsh && {
    antigen use oh-my-zsh

    plugins=(
        MichaelAquilina/zsh-you-should-use
        RitchieS/zsh-exa@main
        aliases
        colored-man-pages
        common-aliases
        emacs
        extract
        git
        git-auto-fetch
        history
        hlissner/zsh-autopair
        per-directory-history
        rsync
        rust
        rustup
        shrink-path
        ssh-agent
        unixorn/autoupdate-antigen.zshplugin
        web-search
        wfxr/forgit
        zoxide
        zpm-zsh/colorize
        zsh-users/zsh-syntax-highlighting
    )

    for p in $plugins; do
        antigen bundle $p;
    done;

    antigen theme romkatv/powerlevel10k

    antigen apply
}

alias IDDQD='sudo su'
alias IDDT='neofetch'
alias IDMUS='mpv --no-video "https://www.youtube.com/watch?v=Jly9qp40rfw"'

alias rm=rip
alias crontab="crontab -i"
alias paru="paru --sudoloop --skipreview --bottomup"
alias cat=bat
alias pkg="zypper"
alias pkg-s="pkg search"
alias pkg-i="sudo zypper install"

alias q=exit

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
# shellcheck disable=1090
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

  #+END_SRC
* SSH
  :PROPERTIES:
:HEADER-ARGS+: :tangle ~/.ssh/config
  :END:
  #+begin_src conf
    Host *
	    AddKeysToAgent yes
    Host Elite
	    HostName Phoenix-Elite.local
    Host Port
	    HostName Phoenix-Port.local
    Host ZmioSem
	    User michal_zacek
	    HostName hiccup.mazim.cz
	    Port 10169 
    Host Myst
	    HostName 34.122.2.188
    Host Fray1
	    User zacekmi2
	    HostName fray1.fit.cvut.cz
	    ControlMaster auto
	    PubkeyAcceptedAlgorithms +ssh-rsa
	    HostkeyAlgorithms +ssh-rsa
    Host Fray2
	    User zacekmi2
	    HostName fray2.fit.cvut.cz
	    ControlMaster auto
	    PubkeyAcceptedAlgorithms +ssh-rsa
	    HostkeyAlgorithms +ssh-rsa
#+end_src
* Alacritty
  :PROPERTIES:
  :HEADER-ARGS+: :tangle ~/.config/alacritty/alacritty.yml
  :END:
#+BEGIN_SRC conf
window:
  dynamic_padding: true
scrolling:
  history: 10000
font:
  normal:
    family: Fira Code
  size: 8
draw_bold_text_with_bright_colors: true
background_opacity: 0.9
colors:
  # Default colors
  primary:
    # hard contrast: background = '#1d2021'
    background: '#282828'
    # soft contrast: background = '#32302f'
    foreground: '#ebdbb2'

  # Normal colors
  normal:
    black: '#282828'
    red: '#cc241d'
    green: '#98971a'
    yellow: '#d79921'
    blue: '#458588'
    magenta: '#b16286'
    cyan: '#689d6a'
    white: '#a89984'

  # Bright colors
  bright:
    black: '#928374'
    red: '#fb4934'
    green: '#b8bb26'
    yellow: '#fabd2f'
    blue: '#83a598'
    magenta: '#d3869b'
    cyan: '#8ec07c'
    white: '#ebdbb2'
theme: Gruvbox-Dark
#+END_SRC
* DE
** X11
*** Keyboard
    :PROPERTIES:
    :HEADER-ARGS+: :tangle /sudo::/etc/X11/xorg.conf.d/00-keyboard.conf
    :END:
    #+BEGIN_SRC conf
# Written by systemd-localed(8), read by systemd-localed and Xorg. It's
# probably wise not to edit this file manually. Use localectl(1) to
# instruct systemd-localed to update it.
Section "InputClass"
        Identifier "system-keyboard"
        MatchIsKeyboard "on"
        Option "XkbLayout" "us,cz"
	Option "XkbVariant" ",qwerty"
	Option "XkbOptions" "grp:caps_switch,lv3:ralt_switch,compose:rctrl-altgr"
EndSection

    #+END_SRC
*** Touchpad
    :PROPERTIES:
    :HEADER-ARGS+: :tangle /sudo::/etc/X11/xorg.conf.d/70-touchpad.conf
    :END:
    #+BEGIN_SRC conf
      Section "InputClass"
	      Identifier "touchpad"
	      Driver "libinput"
	      MatchIsTouchpad "on"
	      Option "DisableWhileTyping" "on"
	      Option "Tapping" "1"
	      Option "NaturalScrolling" "1"
	      Option "Emulate3Buttons" "yes"
      EndSection
    #+END_SRC
** I3
   :PROPERTIES:
   :HEADER-ARGS+: :tangle ~/.config/i3/config
   :END:
#+BEGIN_SRC conf
     # i3 config file (v4)

     # Please see https://i3wm.org/docs/userguide.html for a complete reference!

     # This config file uses keycodes (bindsym) and was written for the QWERTY
     # layout.

     # To get a config file with the same key positions, but for your current
     # layout, use the i3-config-wizard

     set $mod Mod4

     # Font for window titles. Will also be used by the bar unless a different font
     # is used in the bar {} block below.

     font pango:Fira Code 9

  # This font is widely installed, provides lots of unicode glyphs, right-to-left
  # text rendering and scalability on retina/hidpi displays (thanks to pango).
  #font pango:DejaVu Sans Mono 8

  # The combination of xss-lock, nm-applet and pactl is a popular choice, so
  # they are included here as an example. Modify as you see fit.

  # xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the
  # screen before suspend. Use loginctl lock-session to lock your screen.
  exec --no-startup-id xss-lock --transfer-sleep-lock -- light-locker-command -l
  bindsym Ctrl+$mod+l exec light-locker-command -l

  # NetworkManager is the most popular way to manage wireless networks on Linux,
  # and nm-applet is a desktop environment-independent system tray GUI for it.
  exec --no-startup-id nm-applet

  exec /usr/libexec/polkit-gnome-authentication-agent-1
  exec ~/.screenlayout/main.sh

  # Use pactl to adjust volume in PulseAudio.
  set $refresh_i3status killall -SIGUSR1 i3status
  bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
  bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
  bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
  bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status

  bindsym XF86MonBrightnessDown exec brightnessctl -q set 5%- && ( echo $((`brightnessctl get` * 100 / `brightnessctl m`)) > $SWAYSOCK.wob )
  bindsym XF86MonBrightnessUp exec brightnessctl -q set +5% && ( echo $((`brightnessctl get` * 100 / `brightnessctl m`)) > $SWAYSOCK.wob )

  bindsym XF86AudioPrev exec playerctl previous
  bindsym XF86AudioNext exec playerctl next
  bindsym XF86AudioPlay exec playerctl play-pause

  # use these keys for focus, movement, and resize directions when reaching for
  # the arrows is not convenient
  set $up l
  set $down k
  set $left j
  set $right semicolon

  # use Mouse+$mod to drag floating windows to their wanted position
  floating_modifier $mod

  # start a terminal
  bindsym $mod+Return exec alacritty

  # kill focused window
  bindsym $mod+Shift+q kill

  # start dmenu (a program launcher)
  bindsym $mod+d exec --no-startup-id rofi -show combi
  # A more modern dmenu replacement is rofi:
  # bindsym $mod+d exec "rofi -modi drun,run -show drun"
  # There also is i3-dmenu-desktop which only displays applications shipping a
  # .desktop file. It is a wrapper around dmenu, so you need that installed.
  # bindsym $mod+d exec --no-startup-id i3-dmenu-desktop

  # change focus
  bindsym $mod+$left focus left
  bindsym $mod+$down focus down
  bindsym $mod+$up focus up
  bindsym $mod+$right focus right

  # alternatively, you can use the cursor keys:
  bindsym $mod+Left focus left
  bindsym $mod+Down focus down
  bindsym $mod+Up focus up
  bindsym $mod+Right focus right

  # move focused window
  bindsym $mod+Shift+$left move left
  bindsym $mod+Shift+$down move down
  bindsym $mod+Shift+$up move up
  bindsym $mod+Shift+$right move right

  # alternatively, you can use the cursor keys:
  bindsym $mod+Shift+Left move left
  bindsym $mod+Shift+Down move down
  bindsym $mod+Shift+Up move up
  bindsym $mod+Shift+Right move right

  # split in horizontal orientation
  bindsym $mod+h split h

  # split in vertical orientation
  bindsym $mod+v split v

  # enter fullscreen mode for the focused container
  bindsym $mod+f fullscreen toggle

  # change container layout (stacked, tabbed, toggle split)
  bindsym $mod+s layout stacking
  bindsym $mod+w layout tabbed
  bindsym $mod+e layout toggle split

  # toggle tiling / floating
  bindsym $mod+Shift+space floating toggle

  # change focus between tiling / floating windows
  bindsym $mod+space focus mode_toggle

  # focus the parent container
  bindsym $mod+a focus parent

  # focus the child container
  #bindsym $mod+d focus child

  # move the currently focused window to the scratchpad
  bindsym $mod+Shift+minus move scratchpad

  # Show the next scratchpad window or hide the focused scratchpad window.
  # If there are multiple scratchpad windows, this command cycles through them.
  bindsym $mod+minus scratchpad show

  # Define names for default workspaces for which we configure key bindings later on.
  # We use variables to avoid repeating the names in multiple places.
  set $ws1 "1"
  set $ws2 "2"
  set $ws3 "3"
  set $ws4 "4"
  set $ws5 "5"
  set $ws6 "6"
  set $ws7 "7"
  set $ws8 "8"
  set $ws9 "9"
  set $ws10 "10"

  # switch to workspace
  bindsym $mod+1 workspace number $ws1
  bindsym $mod+2 workspace number $ws2
  bindsym $mod+3 workspace number $ws3
  bindsym $mod+4 workspace number $ws4
  bindsym $mod+5 workspace number $ws5
  bindsym $mod+6 workspace number $ws6
  bindsym $mod+7 workspace number $ws7
  bindsym $mod+8 workspace number $ws8
  bindsym $mod+9 workspace number $ws9
  bindsym $mod+0 workspace number $ws10

  # move focused container to workspace
  bindsym $mod+Shift+1 move container to workspace number $ws1
  bindsym $mod+Shift+2 move container to workspace number $ws2
  bindsym $mod+Shift+3 move container to workspace number $ws3
  bindsym $mod+Shift+4 move container to workspace number $ws4
  bindsym $mod+Shift+5 move container to workspace number $ws5
  bindsym $mod+Shift+6 move container to workspace number $ws6
  bindsym $mod+Shift+7 move container to workspace number $ws7
  bindsym $mod+Shift+8 move container to workspace number $ws8
  bindsym $mod+Shift+9 move container to workspace number $ws9
  bindsym $mod+Shift+0 move container to workspace number $ws10

  # reload the configuration file
  bindsym $mod+Shift+c reload
  # restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
  bindsym $mod+Shift+r restart
  # exit i3 (logs you out of your X session)
  bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"

  # resize window (you can also use the mouse for that)
  mode "resize" {
	  # These bindings trigger as soon as you enter the resize mode

	  # Pressing left will shrink the window’s width.
	  # Pressing right will grow the window’s width.
	  # Pressing up will shrink the window’s height.
	  # Pressing down will grow the window’s height.
	  bindsym $left       resize shrink width 10 px or 10 ppt
	  bindsym $down       resize grow height 10 px or 10 ppt
	  bindsym $up         resize shrink height 10 px or 10 ppt
	  bindsym $right      resize grow width 10 px or 10 ppt

	  # same bindings, but for the arrow keys
	  bindsym Left        resize shrink width 10 px or 10 ppt
	  bindsym Down        resize grow height 10 px or 10 ppt
	  bindsym Up          resize shrink height 10 px or 10 ppt
	  bindsym Right       resize grow width 10 px or 10 ppt

	  # back to normal: Enter or Escape or $mod+r
	  bindsym Return mode "default"
	  bindsym Escape mode "default"
	  bindsym $mod+r mode "default"
  }

  bindsym $mod+r mode "resize"

  # [[https://github.com/a-schaefers/i3-wm-gruvbox-theme][Theme]]

  # set primary gruvbox colorscheme colors
  set $bg #282828
  set $red #cc241d
  set $green #98971a
  set $yellow #d79921
  set $blue #458588
  set $purple #b16286
  set $aqua #689d68
  set $gray #a89984
  set $darkgray #1d2021

  # class                 border|backgr|text|indicator|child_border
  client.focused          $blue $blue $darkgray $purple $darkgray
  client.focused_inactive $darkgray $darkgray $yellow $purple $darkgray
  client.unfocused        $darkgray $darkgray $yellow $purple $darkgray
  client.urgent           $red $red $white $red $red

  bar {
      status_command bumblebee-status \
		     -t gruvbox-powerline \
		     -m nic disk:root progress memory cpu battery pasink pasource time date git
	colors {
	       background #000000
	       statusline #FFFFFF
	       separator  #666666

	       # workspaces section            
	       #                    border  backgr. text
	       focused_workspace    $aqua $aqua $darkgray
	       inactive_workspace   $darkgray $darkgray $yellow
	       active_workspace     $darkgray $darkgray $yellow
	       urgent_workspace     $red $red $bg
	       }
  }

  exec light-locker
  exec_always feh --bg-fill ~/Sync/wallpaper.png
   #+END_SRC
** Rofi
   :PROPERTIES:
   :HEADER-ARGS+: :tangle ~/.config/rofi/config.rasi :comments none
   :END:
   #+BEGIN_SRC conf
configuration {
	modi: [combi];
	combi-modi: [drun,run,ssh,window];
	font: "Fira Code 12";
	show-icons: true;	
}
@import "/usr/share/rofi/themes/gruvbox-dark-hard.rasi"
   #+END_SRC
** LightDM
   :PROPERTIES:
   :HEADER-ARGS+: :tangle /sudo::/etc/lightdm/lightdm-gtk-greeter.conf
   :END:
   #+BEGIN_SRC conf
[greeter]
background=/usr/share/themes/DOOM/wallpaper.jpg
theme-name=Greybird-Geeko-Dark
indicators = ~host;~spacer;~clock;~spacer;~language;~layout;~session;~a11y;~power;
   #+END_SRC
* Emacs
  :PROPERTIES:
  :HEADER-ARGS+: :tangle ~/.emacs.d/init.el :tangle-mode (identity #o644)
  :END:
** Variable Init
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Michal Atlas"
	  user-mail-address "michal.z.atlas@gmail.com")

    (setq org-directory "~/Documents/")
    (setq projectile-project-search-path (list "~/Documents" "~/source"))
    (setq org-agenda-files "~/Documents/agenda.list")
    (setq calendar-week-start-day 1)
    (setq org-agenda-start-on-weekday 1)
    (setq find-function-C-source-directory "~/source/emacs")
    (global-auto-revert-mode 1)
    (recentf-mode 1)
    (setq recentf-max-menu-items 25)
    (setq recentf-max-saved-items 25)
    (global-set-key "\C-x\ \C-r" 'recentf-open-files)
    (run-at-time nil (* 10 60) 'recentf-save-list)
#+END_SRC
** Package Bootstrap
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  ;; Bootstrap 'use-package'
  (eval-after-load 'gnutls
    '(add-to-list 'gnutls-trustfiles "/etc/ssl/cert.pem"))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (require 'bind-key)
  (setq use-package-always-ensure t)

  ;; This is only needed once, near the top of the file
  (eval-when-compile
    ;; Following line is not needed if use-package.el is in ~/.emacs.d
    (add-to-list 'load-path "~/.emacs.d/use-package")
    (require 'use-package))

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC
*** Quelpa
    #+BEGIN_SRC emacs-lisp
      ;; Install and load `quelpa-use-package'.
      (use-package quelpa-use-package)
    #+END_SRC
** Built-in Keybinds
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
** Dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :config
       (setq dashboard-projects-backend 'projectile)
       (setq dashboard-items '((recents  . 7)
			       (bookmarks . 5)
			       (projects . 7)
			       (agenda . 5)
			       (registers . 5)))
       (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
       (setq dashboard-banner-logo-title "Atlas Emacs")
       (setq dashboard-startup-banner 'logo)
       (setq dashboard-set-heading-icons t)
       (setq dashboard-set-file-icons t)
       (setq dashboard-set-navigator t)
       (setq dashboard-set-init-info t)
       (setq dashboard-week-agenda t)
       (setq dashboard-center-content t)
       (dashboard-setup-startup-hook))
   #+END_SRC
** Theming
#+BEGIN_SRC emacs-lisp
  ;; in ~/.doom.d/config.el
  (setq doom-theme 'doom-gruvbox)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (show-paren-mode 1)

  (use-package indent-guide
    :hook (prog-mode . indent-guide-global-mode))
  (global-display-fill-column-indicator-mode 1)

  (setq default-frame-alist '((set-frame-font "Fira Code 13" nil t)))

  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-gruvbox t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))


  (use-package solaire-mode)
  (solaire-global-mode +1)

  (use-package which-key
    :config
    (which-key-mode)
    (setq which-key-popup-type 'minibuffer))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (global-display-line-numbers-mode)
  (global-hl-line-mode 1)

  (use-package rainbow-identifiers
    :hook (prog-mode . rainbow-identifiers-mode))
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  (use-package rainbow-blocks
    :hook ((lisp-mode . rainbow-blocks-mode)
	   (emacs-list-mode . rainbow-blocks-mode)))
#+END_SRC
** Formatting
#+BEGIN_SRC emacs-lisp
  (use-package format-all
    :hook (prog-mode . format-all-mode))
  (use-package aggressive-indent
    :config (global-aggressive-indent-mode 1))
#+END_SRC
** Crux
#+BEGIN_SRC emacs-lisp
(use-package crux)
#+END_SRC
** Undo-tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :config (global-undo-tree-mode 1))
   #+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (company-mode)
    :hook
    (after-init . global-company-mode))
  (use-package flycheck
    :config
    (global-flycheck-mode))
#+END_SRC
*** Snippets
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
	:config (yas-global-mode 1))
    #+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
    (use-package projectile
      :config
      (projectile-mode +1)
      (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
** Treemacs
#+BEGIN_SRC emacs-lisp
    (use-package treemacs
      :ensure t
      :defer t
      :init
      (with-eval-after-load 'winum
	(define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
      :bind
      (:map global-map
	    ("M-0"       . treemacs-select-window)
	    ("C-x t 1"   . treemacs-delete-other-windows)
	    ("C-x t t"   . treemacs)
	    ("C-x t B"   . treemacs-bookmark)
	    ("C-x t C-t" . treemacs-find-file)
	    ("C-x t M-t" . treemacs-find-tag)))

    (use-package treemacs-projectile
      :after (treemacs projectile)
      :ensure t)

    (use-package treemacs-icons-dired
      :hook (dired-mode . treemacs-icons-dired-enable-once)
      :ensure t)

    (use-package treemacs-magit
      :after (treemacs magit)
      :ensure t)

    (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
      :after (treemacs persp-mode) ;;or perspective vs. persp-mode
      :ensure t
      :config (treemacs-set-scope-type 'Perspectives))

#+END_SRC
** Vertico
#+BEGIN_SRC emacs-lisp
    ;; Enable vertico
    (use-package vertico
      :init
      (vertico-mode)

      ;; Different scroll margin
      ;; (setq vertico-scroll-margin 0)

      ;; Show more candidates
      ;; (setq vertico-count 20)

      ;; Grow and shrink the Vertico minibuffer
      ;; (setq vertico-resize t)

      ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
      ;; (setq vertico-cycle t)
      )

    ;; Optionally use the `orderless' completion style. See
    ;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
    ;; dispatcher. Additionally enable `partial-completion' for file path
    ;; expansion. `partial-completion' is important for wildcard support.
    ;; Multiple files can be opened at once with `find-file' if you enter a
    ;; wildcard. You may also give the `initials' completion style a try.
    (use-package orderless
      :init
      ;; Configure a custom style dispatcher (see the Consult wiki)
      ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
      ;;       orderless-component-separator #'orderless-escapable-split-on-space)
      (setq completion-styles '(orderless)
	    completion-category-defaults nil
	    completion-category-overrides '((file (styles partial-completion)))))

    ;; Persist history over Emacs restarts. Vertico sorts by history position.
    (use-package savehist
      :init
      (savehist-mode))

    ;; A few more useful configurations...
    (use-package emacs
      :init
      ;; Add prompt indicator to `completing-read-multiple'.
      ;; Alternatively try `consult-completing-read-multiple'.
      (defun crm-indicator (args)
	(cons (concat "[CRM] " (car args)) (cdr args)))
      (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

      ;; Do not allow the cursor in the minibuffer prompt
      (setq minibuffer-prompt-properties
	    '(read-only t cursor-intangible t face minibuffer-prompt))
      (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

      ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
      ;; Vertico commands are hidden in normal buffers.
      ;; (setq read-extended-command-predicate
      ;;       #'command-completion-default-include-p)

      ;; Enable recursive minibuffers
      (setq enable-recursive-minibuffers t))
#+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'compile)
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; if you want which-key integration
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  (use-package dap-mode)
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
  (require' dap-gdb-lldb)
#+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind (
	     ("C-c v s" . magit-stage)
	     ("C-c v p" . magit-push)
	     ("C-c v f" . magit-pull)
	     ("C-c v c" . magit-commit)
	     ))
     (use-package magit-todos)
   #+END_SRC
** Mu4e
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
     (global-set-key (kbd "C-c M M") 'mu4e)
     (require 'mu4e)
     (use-package mu4e-alert
       :config (mu4e-alert-set-default-style 'libnotify)
       :hook
       ((after-init . mu4e-alert-enable-notifications)
	(after-init . mu4e-alert-enable-mode-line-display)))
     (use-package org-msg
       :init (setq mail-user-agent 'mu4e-user-agent))
   #+END_SRC
** Bongo
   #+begin_src emacs-lisp
     (use-package bongo
       :ensure t)
   #+end_src
** Resize Window
   #+begin_src emacs-lisp
     (use-package resize-window
       :ensure t
       :bind ("C-S-r" . resize-window))
   #+end_src
** Misc.
#+BEGIN_SRC emacs-lisp
  (use-package adaptive-wrap)
  (use-package calfw
    :ensure t)
  (use-package calfw-org
    :ensure t)
  (use-package vimish-fold)
  (use-package diff-hl)
  (use-package diredfl)
  (use-package dired-rsync)
  (use-package ibuffer-projectile)
  (use-package ibuffer-vc)
  (use-package git-timemachine)
  (use-package quickrun)
  (use-package pdf-tools)
  (use-package kurecolor)
  (use-package ranger)
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
  (use-package crux)
  (use-package xkcd)
  (use-package htmlize
    :quelpa (htmlize :fetcher github :repo "hniksic/emacs-htmlize"))
  (use-package git-gutter
    :config
    (global-git-gutter-mode +1))
  (use-package org-fragtog
    :hook (org-mode . org-fragtog-mode))
  (use-package avy
    :bind
    ("M-q" . avy-goto-word-0))
  (use-package anzu
    :config
    ;; ANZU - Replace Highlighting
    (global-anzu-mode +1)
    :bind
    (("M-%" . anzu-query-replace)
     ("C-M-%" . anzu-query-replace-regexp)))
#+END_SRC
** Org Mode
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (dot . t)
     (C . t)
     (shell . t)
     ))

  (use-package org-present)
  (use-package ob-async)
  (use-package org-cliplink)
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode))

#+END_SRC
** Marginalia
#+BEGIN_SRC emacs-lisp

    ;; Enable richer annotations using the Marginalia package
    (use-package marginalia
      ;; Either bind `marginalia-cycle` globally or only in the minibuffer
      ;;:bind (("M-A" . marginalia-cycle)
      ;;       :map minibuffer-local-map
      ;;       ("M-A" . marginalia-cycle))

      ;; The :init configuration is always executed (Not lazy!)
      :init

      ;; Must be in the :init section of use-package such that the mode gets
      ;; enabled right away. Note that this forces loading the package.
      (marginalia-mode))
    (use-package all-the-icons-completion
      :hook (marginalia-mode . all-the-icons-completion-mode))
#+END_SRC
** Embark and Consult
#+BEGIN_SRC emacs-lisp
    (use-package embark
      :ensure t

      :bind
      (("C-." . embark-act)         ;; pick some comfortable binding
       ("C-;" . embark-dwim)        ;; good alternative: M-.
       ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

      :init

      ;; Optionally replace the key help with a completing-read interface
      (setq prefix-help-command #'embark-prefix-help-command)

      :config

      ;; Hide the mode line of the Embark live/completions buffers
      (add-to-list 'display-buffer-alist
		   '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		     nil
		     (window-parameters (mode-line-format . none)))))

    ;; Consult users will also want the embark-consult package.
    (use-package embark-consult
      :ensure t
      :after (embark consult)
      :demand t ; only necessary if you have the hook below
      ;; if you want to have consult previews as you move around an
      ;; auto-updating embark collect buffer
      :hook
      (embark-collect-mode . consult-preview-at-point-mode))

    ;; Example configuration for Consult
    (use-package consult
      ;; Replace bindings. Lazily loaded due by `use-package'.
      :bind (;; C-c bindings (mode-specific-map)
	     ("C-c h" . consult-history)
	     ("C-c m" . consult-mode-command)
	     ("C-c b" . consult-bookmark)
	     ("C-c k" . consult-kmacro)
	     ;; C-x bindings (ctl-x-map)
	     ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	     ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	     ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	     ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	     ;; Custom M-# bindings for fast register access
	     ("M-#" . consult-register-load)
	     ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	     ("C-M-#" . consult-register)
	     ;; Other custom bindings
	     ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	     ("<help> a" . consult-apropos)            ;; orig. apropos-command
	     ;; M-g bindings (goto-map)
	     ("M-g e" . consult-compile-error)
	     ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	     ("M-g g" . consult-goto-line)             ;; orig. goto-line
	     ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	     ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	     ("M-g m" . consult-mark)
	     ("M-g k" . consult-global-mark)
	     ("M-g i" . consult-imenu)
	     ("M-g I" . consult-imenu-multi)
	     ;; M-s bindings (search-map)
	     ("M-s f" . consult-find)
	     ("M-s F" . consult-locate)
	     ("M-s g" . consult-grep)
	     ("M-s G" . consult-git-grep)
	     ("M-s r" . consult-ripgrep)
	     ("M-s l" . consult-line)
	     ("M-s L" . consult-line-multi)
	     ("M-s m" . consult-multi-occur)
	     ("M-s k" . consult-keep-lines)
	     ("M-s u" . consult-focus-lines)
	     ;; Isearch integration
	     ("M-s e" . consult-isearch-history)
	     :map isearch-mode-map
	     ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	     ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	     ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	     ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

      ;; Enable automatic preview at point in the *Completions* buffer.
      ;; This is relevant when you use the default completion UI,
      ;; and not necessary for Vertico, Selectrum, etc.
      :hook (completion-list-mode . consult-preview-at-point-mode)

      ;; The :init configuration is always executed (Not lazy)
      :init

      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 0
	    register-preview-function #'consult-register-format)

      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)

      ;; Optionally replace `completing-read-multiple' with an enhanced version.
      (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
	    xref-show-definitions-function #'consult-xref)

      ;; Configure other variables and modes in the :config section,
      ;; after lazily loading the package.
      :config

      ;; Optionally configure preview. The default value
      ;; is 'any, such that any key triggers the preview.
      ;; (setq consult-preview-key 'any)
      ;; (setq consult-preview-key (kbd "M-."))
      ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
      ;; For some commands and buffer sources it is useful to configure the
      ;; :preview-key on a per-command basis using the `consult-customize' macro.
      (consult-customize
       consult-theme
       :preview-key '(:debounce 0.2 any)
       consult-ripgrep consult-git-grep consult-grep
       consult-bookmark consult-recent-file consult-xref
       consult--source-file consult--source-project-file consult--source-bookmark
       :preview-key (kbd "M-."))

      ;; Optionally configure the narrowing key.
      ;; Both < and C-+ work reasonably well.
      (setq consult-narrow-key "<") ;; (kbd "C-+")

      ;; Optionally make narrowing help available in the minibuffer.
      ;; You may want to use `embark-prefix-help-command' or which-key instead.
      ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

      ;; Optionally configure a function which returns the project root directory.
      ;; There are multiple reasonable alternatives to chose from.
      ;;;; 1. project.el (project-roots)
      (setq consult-project-root-function
	    (lambda ()
	      (when-let (project (project-current))
		(car (project-roots project)))))
      ;;;; 2. projectile.el (projectile-project-root)
      ;; (autoload 'projectile-project-root "projectile")
      ;; (setq consult-project-root-function #'projectile-project-root)
      ;;;; 3. vc.el (vc-root-dir)
      ;; (setq consult-project-root-function #'vc-root-dir)
      ;;;; 4. locate-dominating-file
      ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
    )

#+END_SRC
** Langs
*** C
    #+BEGIN_SRC emacs-lisp
      (use-package irony
	:hook ((c-mode . irony-mode)
	       (c-mode . lsp)
	       (c++-mode . irony-mode)
	       (c++-mode . lsp)
	       (irony-mode . irony-cdb-autosetup-compile-options)))
      (use-package irony-eldoc
	:hook (irony-mode . irony-eldoc))
    #+END_SRC
*** Bash
    #+BEGIN_SRC emacs-lisp
      (add-hook 'shell-script-mode 'prog-mode)
    #+END_SRC
*** Rust
    #+BEGIN_SRC emacs-lisp
      (use-package rust-mode
	:ensure t)
      (use-package rustic
	:ensure t
	:init (setq racer-rust-src-path "~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library")
	:hook ((rust-mode . rustic-mode)
	       (rust-mode . lsp)
	       (rustic-mode . eldoc-mode)))
    #+END_SRC
*** Haskell
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-haskell
	:hook ((haskell-mode . lsp)
	       (haskell-literate-mode . lsp)))
    #+END_SRC
*** Python
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-pyright
	:hook (python-mode . lsp))
      (use-package jedi
	:hook (python-mode . jedi:setup))
    #+END_SRC
*** Clojure
    #+BEGIN_SRC emacs-lisp
      (use-package clojure-mode
	:ensure t
	:hook (clojure-mode . prog-mode))
      (use-package cider
	:ensure t
	:hook (clojure-mode . cider))
    #+END_SRC
*** Scala
    #+BEGIN_SRC emacs-lisp
(use-package lsp-metals
  :ensure t
  :custom
  ;; Metals claims to support range formatting by default but it supports range
  ;; formatting of multiline strings only. You might want to disable it so that
  ;; emacs can use indentation provided by scala-mode.
  (lsp-metals-server-args '("-J-Dmetals.allow-multiline-string-formatting=off"))
  :hook (scala-mode . lsp))
    #+END_SRC
*** LaTeX
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-latex
	:hook (latex-mode . prog-mode))
    #+END_SRC
** Personal
*** Hackles
    #+BEGIN_SRC emacs-lisp
      (use-package hackles
	:quelpa (hackles :fetcher github :repo "Michal-Atlas/emacs-hackles"))
    #+END_SRC

* Mu4e
  #+BEGIN_SRC conf :tangle ~/.mbsyncrc
    # mbsyncrc based on
    # http://www.ict4g.net/adolfo/notes/2014/12/27/EmacsIMAP.html
    # ACCOUNT INFORMATION
    IMAPAccount gmail
    # Address to connect to
    Host imap.gmail.com
    User michal.z.atlas@gmail.com
    PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/.emacs.d/mu4e/.mbsyncpass-EM.gpg"
    AuthMechs LOGIN
    SSLType IMAPS
    CertificateFile /etc/ssl/certs/ca-certificates.crt

    # THEN WE SPECIFY THE LOCAL AND REMOTE STORAGE
    # - THE REMOTE STORAGE IS WHERE WE GET THE MAIL FROM (E.G., THE
    #   SPECIFICATION OF AN IMAP ACCOUNT)
    # - THE LOCAL STORAGE IS WHERE WE STORE THE EMAIL ON OUR COMPUTER

    # REMOTE STORAGE (USE THE IMAP ACCOUNT SPECIFIED ABOVE)
    IMAPStore gmail-remote
    Account gmail

    # LOCAL STORAGE (CREATE DIRECTORIES with mkdir -p ~/Maildir/gmail)
    MaildirStore gmail-local
    Path ~/Maildir/gmail/
    Inbox ~/Maildir/gmail/INBOX
    # REQUIRED ONLY IF YOU WANT TO DOWNLOAD ALL SUBFOLDERS; SYNCING SLOWS DOWN
    # SubFolders Verbatim

    # CONNECTIONS SPECIFY LINKS BETWEEN REMOTE AND LOCAL FOLDERS
    #
    # CONNECTIONS ARE SPECIFIED USING PATTERNS, WHICH MATCH REMOTE MAIl
    # FOLDERS. SOME COMMONLY USED PATTERS INCLUDE:
    #
    # 1 "*" TO MATCH EVERYTHING
    # 2 "!DIR" TO EXCLUDE "DIR"
    # 3 "DIR" TO MATCH DIR

    Channel gmail-inbox
    Far :gmail-remote:
    Near :gmail-local:
    Patterns "INBOX"
    Create Both
    Expunge Both
    SyncState *

    # GROUPS PUT TOGETHER CHANNELS, SO THAT WE CAN INVOKE
    # MBSYNC ON A GROUP TO SYNC ALL CHANNELS
    #
    # FOR INSTANCE: "mbsync gmail" GETS MAIL FROM
    # "gmail-inbox", "gmail-sent", and "gmail-trash"
    #
    Group gmail
    Channel gmail-inbox

    IMAPAccount fit
    # Address to connect to
    Host outlook.office365.com
    User zacekmi2@cvut.cz
    PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/.emacs.d/mu4e/.mbsyncpass-FT.gpg"
    AuthMechs LOGIN
    SSLType IMAPS
    CertificateFile /etc/ssl/certs/ca-certificates.crt


    # REMOTE STORAGE (USE THE IMAP ACCOUNT SPECIFIED ABOVE)
    IMAPStore fit-remote
    Account fit

    # LOCAL STORAGE (CREATE DIRECTORIES with mkdir -p ~/Maildir/gmail)
    MaildirStore fit-local
    Path ~/Maildir/fit/
    Inbox ~/Maildir/fit/INBOX

    Channel fit-inbox
    Far :fit-remote:
    Near :fit-local:
    Patterns "INBOX"
    Create Both
    Expunge Both
    SyncState *

    # GROUPS PUT TOGETHER CHANNELS, SO THAT WE CAN INVOKE
    # MBSYNC ON A GROUP TO SYNC ALL CHANNELS
    #
    # FOR INSTANCE: "mbsync gmail" GETS MAIL FROM
    # "gmail-inbox", "gmail-sent", and "gmail-trash"
    #
    Group fit
    Channel fit-inbox
  #+END_SRC

* TMUX
  :PROPERTIES:
  :HEADER-ARGS+: :tangle ~/.tmux.conf
  :END:
  #+BEGIN_SRC conf
set -g mouse on

set -g default-shell "/bin/zsh"

bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

set -g @plugin 'jimeh/tmux-themepack'
set -g @themepack 'basic'

run '~/.tmux/plugins/tpm/tpm'
  #+END_SRC

* Elfeed
:PROPERTIES:
:HEADER-ARGS+: :tangle ~/.emacs.d/init.el
:END:
#+BEGIN_SRC emacs-lisp
  (use-package elfeed)
  (setq elfeed-feeds
	'(("https://xkcd.com/rss.xml" comics)
	  ("https://www.smbc-comics.com/comic/rss" comics)
	  ("https://www.giantitp.com/comics/oots.rss" comics)
	  ("https://feeds.feedburner.com/LookingForGroup" comics)
	  ("https://www.oglaf.com/" comics)
	  ("http://phdcomics.com/gradfeed.php" comics)
	  ("https://blog.tecosaur.com/tmio/rss.xml" emacs)
	  ("https://akce.cvut.cz/?node=rss&group=7" ctu)
	  ("https://akce.cvut.cz/?node=rss&group=11" ctu)
	  ("https://aktualne.cvut.cz/rss/newsflashes" ctu)
	  ("https://gitlab.fit.cvut.cz/zacekmi2.atom?feed_token=aVNtRA3xYzqwpkQBoM3z" fit)
	  ("http://feeds.bbci.co.uk/news/world/rss.xml" news)
	  ("http://feeds.bbci.co.uk/news/technology/rss.xml" news)
	  ("http://feeds.bbci.co.uk/news/video_and_audio/world/rss.xml" podcast)
	  ("http://festivalofthespokennerd.libsyn.com/rss" podcast)))
#+END_SRC
