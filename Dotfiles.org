#+TITLE: Dotfiles
#+AUTHOR: Michal Atlas
#+PROPERTY: header-args :comments both :mkdirp yes

* Utils

#+NAME: table-alist
#+begin_src emacs-lisp :var data=()
  (mapcar (lambda (q) (cons (format "%s" (car q))
		       (format "%s" (cadr q))))
	  data)
#+end_src

* Logo
#+begin_src ascii :tangle logo.txt :comments no
     ..                   s          ..                .x+=:.
  :**888H: `: .xH""      :8    x .d88"                z`    ^%
 X   `8888k XX888       .88     5888R                    .   <k
'8hx  48888 ?8888      :888ooo  '888R         u        .@8Ned8"
'8888 '8888 `8888    -*8888888   888R      us888u.   .@^%8888"
 %888>'8888  8888      8888      888R   .@88 "8888" x88:  `)8b.
   "8 '888"  8888      8888      888R   9888  9888  8888N=*8888
  .-` X*"    8888      8888      888R   9888  9888   %8"    R88
    .xhx.    8888     .8888Lu=   888R   9888  9888    @8Wou 9%
  .H88888h.~`8888.>   ^%888*    .888B . 9888  9888  .888888P`
 .~  `%88!` '888*~      'Y"     ^*888%  "888*""888" `   ^"F
       `"     ""                  "%     ^Y"   ^Y'
#+end_src

* Guix

** Build Machines

#+begin_src scheme :tangle machines.scm
(list (build-machine
       (name "hydra.local")
       (systems (list "x86_64-linux"))
       (host-key "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHg7gxhmd2SLBDb3U44L3hxNU8o4dbqZAOnlMTyvgXwp root@(none)")
       (user "michal_atlas")
       (private-key "/home/michal_atlas/.ssh/id_rsa")))
#+end_src

** Channels

#+name: channels
#+begin_src scheme
  (cons*
   (channel
    (name 'nonguix)
    (url "https://gitlab.com/nonguix/nonguix")
    (branch "master")
    (introduction
     (make-channel-introduction
      "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
      (openpgp-fingerprint
       "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
   (channel
    (name 'guixrus)
    (url "https://git.sr.ht/~whereiseveryone/guixrus")
    (introduction
     (make-channel-introduction
      "7c67c3a9f299517bfc4ce8235628657898dd26b2"
      (openpgp-fingerprint
       "CD2D 5EAA A98C CB37 DA91  D6B0 5F58 1664 7F8B E551"))))
   (channel
    (name 'atlas)
    (url "https://git.sr.ht/~michal_atlas/guix-channel"))
   (channel
    (name 'guix-gaming-games)
    (url "https://gitlab.com/guix-gaming-channels/games.git")
    (introduction
     (make-channel-introduction
      "c23d64f1b8cc086659f8781b27ab6c7314c5cca5"
      (openpgp-fingerprint
       "50F3 3E2E 5B0C 3D90 0424  ABE8 9BDC F497 A4BB CC7F"))))
		   #;
		   (channel                   ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
		   (name 'emacs)              ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
		   (url "https://github.com/babariviere/guix-emacs") ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
		   (introduction              ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
		   (make-channel-introduction ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
		   "72ca4ef5b572fea10a4589c37264fa35d4564783" ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
		   (openpgp-fingerprint       ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
		   "261C A284 3452 FB01 F6DF  6CF4 F9B7 864F 2AB4 6F18"))))
   %default-channels)
#+end_src

** System
:PROPERTIES:
:header-args+: :tangle system.scm
:END:

#+begin_src scheme
  (define-module (atlas system)
    #:use-module (gnu)
    #:use-module (gnu packages)
    #:use-module (gnu system setuid)
    #:use-module (gnu services desktop)
    #:use-module (gnu services xorg)
    #:use-module (gnu home)
    #:use-module (gnu home services)
    #:use-module (gnu home services mcron)
    #:use-module (gnu home services shells)
    #:use-module (gnu home services shepherd)
    #:use-module (nongnu services vpn)
    #:use-module (nongnu packages linux)
    #:use-module (nongnu system linux-initrd)
    #:use-module (gnu packages hurd)
    #:use-module (ice-9 textual-ports)
    #:use-module (guix packages))
#+END_SRC

*** Packages

#+BEGIN_SRC scheme
  (use-package-modules
   shells emacs samba linux
   cups)

  (define (pkg-set name pkgs)
    (map (lambda (q) (string-append name "-" q)) pkgs))

  (define %system-desktop-manifest-list
    `(
      "nvi" "patchelf"
      "lvm2"

      ;; DE
      "fontconfig" "font-ghostscript" "font-dejavu" "font-gnu-freefont"
      "font-adobe-source-han-sans" "font-wqy-zenhei"
      "guix-icons" "breeze-icons" "oxygen-icons"
      "xnotify" "brightnessctl" "pamixer" "playerctl"
      "firefox" "xscreensaver" "gparted"
      "nautilus" "gvfs" "samba"
      "pavucontrol" "screen"
      ;;"sway"
      "i3status" "i3lock"
      "flatpak" "font-fira-code"
      "breeze-icons" "hicolor-icon-theme"
      "adwaita-icon-theme"

      ;; KAB
      "pkg-config" "openssl" "indent"

      ;; Gnome extensions
      "gnome-shell-extensions"
      ,@(pkg-set
	 "gnome-shell-extension"
	 `("vertical-overview"
	   "unite-shell"
	   "transparent-window"
	   "topicons-redux"
	   "sound-output-device-chooser"
	   "radio"
	   "paperwm"
	   "noannoyance"
	   "just-perfection"
	   "jiggle"
	   "hide-app-icon"
	   "gsconnect"
	   "dash-to-panel"
	   "dash-to-dock"
	   "customize-ibus"
	   "clipboard-indicator"
	   "burn-my-windows"
	   "blur-my-shell"
	   "appindicator"))
      "matcha-theme"

  ;;; shell-utils
  "file"
  "kitty" "fzf"
  "pandoc" "direnv"
  "vim" "zsh" "git" "git" "htop"
  "xclip" "telescope" "agate"
  "fasd"
  "bat" "zoxide" "exa"
					  ; "tealdeer"
  "password-store"
  "pass-otp"
  "guile-filesystem"
  "transmission-remote-gtk"
  "transmission"
  "pkg-config"
	;;; toolchains
  "gdb" "go" "ccls"
  "cmake" "make" "recutils" "python" "python-ipython"
  "mosh"
  "sbcl" "racket"
  "gnupg" "swi-prolog"
  "sbcl-linedit"

	;;; multimedia
  "grim" "vlc" "mpv"
  "libreoffice"
  "audacity"
  "yt-dlp" "picard"

	;;; graphics
  "feh" "shotwell"
  "inkscape" "gimp" "krita"
  "font-fira-code" "font-jetbrains-mono"
  "font-awesome" "font-tamzen"
  "font-sil-charis" "font-adobe-source-han-sans"
  "font-wqy-zenhei" "font-wqy-microhei"
  "gparted"
  "xrandr" "arandr"
  "graphviz" "xdot"
  "xdotool" "tree"
  "bc" "unzip"
	;;; latex
  "texlive"
  "texlive-tcolorbox"
	;;; games
  "lgogdownloader"
  "supertuxkart" "cataclysm-dda"
  "wesnoth" "steam" "sky" "lure"
  "endless-sky" "naev"
  "gzdoom" "tintin++" "taisei" "kobodeluxe" "dwarf-fortress"

	;;; e-mail
  "mu" "isync" "pinentry"

	;;; desktop
  "fontconfig" "font-ghostscript" "font-dejavu" "font-gnu-freefont"
  "font-adobe-source-han-sans" "font-wqy-zenhei"
  "guix-icons" "breeze-icons" "oxygen-icons"
  "i3-autotiling"
  "blueman" "pasystray" "xss-lock"
  "bemenu" "sway" "swayidle" "swaybg" "swayhide"
  "wl-clipboard" "lagrange"
  "grim" "slurp" "foot"
  "nautilus" "gvfs" "youtube-dl" "okular" "pulseaudio"
  "wob" "font-iosevka" "browserpass-native"
  "xsetroot"

  ;;; big-games
  #;"the-dark-mod" "falltergeist"
  "gnushogi" "nethack" "retux" "angband"
  "retroarch"
  "marble-marcher"

#+end_src

**** Emacs

#+begin_src scheme
  "emacs"
  ,@(pkg-set
     "emacs"
     `(; "exwm"
       "org-roam"
	   "org-roam-ui"
	   "consult-org-roam"
				      ;	  "org-roam-timestamps"
	   "engrave-faces"
	   "go-mode"
	   "use-package"
	   "password-store"
	   "password-store-otp"
	   "org-fragtog"
	   "org-modern"
	   "org-superstar"
	   "highlight-indentation"
	   "rust-mode"
	   "csharp-mode"
				      ;"mode-icons"
	   "doom-modeline"
	   "which-key"
	   "rainbow-identifiers"
	   "rainbow-delimiters"
	   "undo-tree"
	   "ace-window"
	   "eshell-prompt-extras"
	   "eshell-syntax-highlighting"
	   "esh-autosuggest"
	   "git-gutter"
				      ;"savehist"
	   "anzu"
	   "marginalia"
				      ;"org-roam"
				      ;"org-roam-ui"
	   "geiser-racket"
	   "adaptive-wrap"
	   "geiser-guile"
	   "sly"
	   "slime"
	   "geiser"
	   "multiple-cursors"
	   "magit"
	   "helpful"
	   "avy"
	   "browse-kill-ring"
	   "emms"
	   "evil"
	   "vertico"
	   "vertico-posframe"
	   "orderless"
	   "consult"
	   "xah-fly-keys"
	   "ac-geiser"
	   "all-the-icons"
	   "all-the-icons-dired"
	   "auctex"
	   "calfw"
	   "cheat-sh"
	   "circe"
	   "company"
	   "crux"
	   "csv"
	   "csv-mode"
	   "dashboard"
	   "debbugs"
	   "direnv"
	   "ediprolog"
	   "elfeed"
	   "elisp-autofmt"
	   "elpher"
	   "embark"
	   "ement"
	   "eshell-z"
	   "flycheck"
	   "flycheck-haskell"
	   "frames-only-mode"
	   "gdscript-mode"
	   "guix"
	   "haskell-mode"
	   "highlight-indent-guides"
	   "htmlize"
	   "iedit"
	   "lispy"
	   "magit-todos"
	   "markdown-mode"
	   "monokai-theme"
	   "multi-term"
	   "nix-mode"
	   "on-screen"
	   "ox-gemini"
				      ;"parinfer"
	   "pdf-tools"
	   "pg"
	   "projectile"
	   "racket-mode"
	   "realgud"
	   "swiper"
	   "tldr"
	   "vterm"
	   "xkcd"
	   "yaml-mode"
	   "yasnippet"
	   "yasnippet-snippets"
	   "zerodark-theme"
	   "gemini-mode"
				      ;"nov"
	   "dockerfile-mode"
	   "docker"
	   "dmenu"
	   "eglot"
	   "org"
	   "stumpwm-mode"
	   "hackles"
	   "consult-yasnippet"
	   "yasnippet"
	   "tramp"
	   "ssh-agency"
	   "password-generator"
	   "mastodon"
	   "stumpwm-mode"))
#+end_src

**** Libs

#+begin_src scheme
      "yt-dlp"

      ;; Libs
      "ncurses" "curl" "virt-manager"
      "ntfs-3g" "btrfs-progs"
      "cifs-utils"

      ;; Shell utils
      "file" "screen"
      "fzf"
      "pandoc" "zutils"
      "vim" "git" "htop"
      "mosh" "rsync"
#+end_src

**** Toolchains

#+begin_src scheme
      "gcc-toolchain" "ccls"
      "cmake" "make" "recutils" "python" "python-ipython"
      "luajit" "perl" "nix"

      "openvpn" "network-manager-openvpn"
      "gnupg" "pinentry"    
      "nss-certs" "xdg-utils"

      "sway"
      "sbcl"
      "stumpwm"
      "buildapp"
      "stumpish"
      ,@(pkg-set
	 "sbcl"
	 `( ;; StumpWM
	      ,@(pkg-set
		 "stumpwm"
		  `("winner-mode"
		    "swm-gaps"
		    "screenshot"
		    "pass"
		    "pamixer"
		    "numpad-layouts"
		    "notify"
		    "kbd-layouts"
		    "disk"
		    "battery-portable"
		    "globalwindows"
		    "wifi"
		    "ttf-fonts"
		    "stumptray"
		    "net"
		    "mem"
		    "cpu"))
	      "linedit" "mcclim"
	      "serapeum" "eclector"
	      "alexandria" "cl-yacc"
	      "cl-autowrap" "optima" "lparallel"
	      "coalton" "coleslaw" "parser-combinators"
	      "collectors" "cl-strings" "virality"
	      "speechless" "mathkit"
	      "sketch" "cl-liballegro" "cl-fast-ecs"
	      "sdl2kit" "harmony" "cl-raylib"
	      "unix-opts" "cffi" "series"
	      "trial" "trees" "sycamore" "parenscript"
	      "terminfo" "terminal-size"
	      "terminal-keypress" "tar"
	      "tailrec" "screamer" "s-xml"))))

  (define %system-desktop-manifest
    (map specification->package %system-desktop-manifest-list))
#+END_SRC

**** Services

#+BEGIN_SRC scheme
  (use-service-modules
   admin
   audio
   cups
   databases
   desktop
   docker
   file-sharing
   linux
   mcron
   networking
   nix
   pm
   sddm
   shepherd
   ssh
   syncthing
   virtualization
   vpn
   xorg)

  (define-public %system-services-manifest
    (cons*
#+END_SRC

#+BEGIN_SRC scheme :noweb yes
  (service unattended-upgrade-service-type
	   (unattended-upgrade-configuration
	    (channels
	     #~
	     <<channels>>
	     )))
#+END_SRC

#+BEGIN_SRC scheme	      
     (service openssh-service-type)
     (service pam-limits-service-type
      (list
       (pam-limits-entry "*" 'both 'nofile 524288)))
     (service gpm-service-type)
     (service docker-service-type)
     (service gnome-desktop-service-type)
     (service tlp-service-type
	      (tlp-configuration
	       (cpu-boost-on-ac? #t)
	       (wifi-pwr-on-bat? #t)))
     (service inputattach-service-type)
     (service qemu-binfmt-service-type
	   (qemu-binfmt-configuration
	     (platforms (lookup-qemu-platforms "arm" "aarch64" "riscv64"))))
     (zerotier-one-service)
     (service libvirt-service-type
		  (libvirt-configuration
		   (unix-sock-group "libvirt")
		   (tls-port "16555")))
     (service virtlog-service-type
	      (virtlog-configuration
	       (max-clients 1000)))
     (service hurd-vm-service-type
	      (hurd-vm-configuration
	       (disk-size (* 16 (expt 2 30)))
	       (memory-size 2048)))
     (service syncthing-service-type
	      (syncthing-configuration (user "michal_atlas")))
     (service cups-service-type
	      (cups-configuration
	       (web-interface? #t)
	       (extensions
		(list cups-filters hplip-minimal))))
     (service guix-publish-service-type
	      (guix-publish-configuration
	       (host "0.0.0.0")
	       (advertise? #t)))
     (service transmission-daemon-service-type
	      (transmission-daemon-configuration
	       (rpc-bind-address "127.0.0.1")
	       (ratio-limit-enabled? #t)))
     (service postgresql-service-type)
     (service nix-service-type)
     (service bluetooth-service-type)
     (modify-services %desktop-services
       (gdm-service-type
	config =>
	(gdm-configuration
	 (auto-login? #t)
	 (default-user "michal_atlas")
	 (wayland? #t)
	 (auto-suspend? #f)
	 (xorg-configuration
	  (xorg-configuration
	   (extra-config (list "# Touchpad
  Section \"InputClass\"
  Identifier \"touchpad\"
	  Driver \"libinput\"
  MatchIsTouchpad \"on\"
  Option \"DisableWhileTyping\" \"on\"
  Option \"Tapping\" \"1\"
  Option \"NaturalScrolling\" \"1\"
  Option \"Emulate3Buttons\" \"yes\"
  EndSection
  # Touchpad:1 ends here"))
	  (keyboard-layout
	   (keyboard-layout "us,cz" ",ucw" #:options
			    '("grp:caps_switch" #;"ctrl:nocaps" "grp_led"
			      "lv3:ralt_switch" "compose:rctrl-altgr")))))))
      (guix-service-type
       config =>
       (guix-configuration
	(inherit config)
	(discover? #t)
	(substitute-urls
	 (append (list
		  "https://substitutes.nonguix.org")
		 %default-substitute-urls))
	(authorized-keys
	 (append (list
		  (plain-file "non-guix.pub"
			      "(public-key (ecc (curve Ed25519) (q #926B78EBA9416220CA0AFA2EAEC8ED99FC9E9C03AF11CD08AE6F8192BCF68673#)))")
		  (plain-file "hydra.pub"
			      "(public-key (ecc (curve Ed25519) (q #5E7373D527DC6566C2601F79EDD33ADDBCB16CDF1D7A8A12565B76058DB6A219#)))")
		  (plain-file "dagon.pub"
			      "(public-key (ecc (curve Ed25519) (q #D3D457964156E28FBA767F66ED72CC07DE71B9DBFCEAFDBA00652DBFA80D6B46#)))"))
		 %default-authorized-guix-keys)))))))
#+END_SRC

*** Base Config

#+BEGIN_SRC scheme
  (define-public atlas-system-base
    (operating-system
      (host-name #f)
      (file-systems #f)
      (kernel linux)
      (initrd microcode-initrd)
      (firmware (list linux-firmware))
      (locale "en_US.utf8")
      (timezone "Europe/Prague")
      (keyboard-layout
       (keyboard-layout "us,cz" ",ucw" #:options
			'("grp:caps_switch" #;"ctrl:nocaps" "grp_led"
			  "lv3:ralt_switch" "compose:rctrl-altgr")))
      (users (cons* (user-account
		     (name "michal_atlas")
		     (comment "Michal Atlas")
		     (group "users")
		     (home-directory "/home/michal_atlas")
		     (supplementary-groups
		      '("wheel" "netdev" "audio" "docker"
			"video" "libvirt" "kvm" "tty" "transmission")))
		    %base-user-accounts))
      (packages
       (append %system-desktop-manifest
	       %base-packages))
      (setuid-programs
       (append (list (setuid-program
		      (program (file-append cifs-utils "/sbin/mount.cifs")))
		     (setuid-program
		      (program (file-append light "/bin/light"))))
	       %setuid-programs))
      (services
       %system-services-manifest)
      (bootloader
       (bootloader-configuration
	(bootloader grub-efi-bootloader)
	(targets `("/boot/efi"))))
      (name-service-switch %mdns-host-lookup-nss)))
#+END_SRC

*** Machines

**** Dagon

#+BEGIN_SRC scheme
  (define dagon
    (operating-system
      (inherit atlas-system-base)
      (host-name "dagon")
      (swap-devices (list (swap-space
			   (target (uuid
				    "3a5ec2f6-0f10-4f18-9a47-d4aa4586b13f")))))
      (mapped-devices (list (mapped-device
			     (source (uuid
				      "e1651b91-c5f4-465e-94c7-b3197f46a9ee"))
			     (target "cryptroot")
			     (type luks-device-mapping))))
      (file-systems (cons* (file-system
			     (mount-point "/")
			     (device "/dev/mapper/cryptroot")
			     (type "btrfs")
			     (dependencies mapped-devices))
			   (file-system
			     (mount-point "/boot/efi")
			     (device (uuid "3FC5-9472"
					   'fat32))
			     (type "vfat")) %base-file-systems))))
#+END_SRC

**** Hydra

#+BEGIN_SRC scheme
  (define hydra
    (operating-system
      (inherit atlas-system-base)
      (host-name "hydra")
      (mapped-devices
       (list (mapped-device
	      (source
	       (uuid "f99a8f6d-23fd-43d9-a9fd-6e08f286e3b8"))
	      (target "luks-f99a8f6d-23fd-43d9-a9fd-6e08f286e3b8")
	      (type luks-device-mapping))))
      (file-systems (cons*
		     (file-system
		       (mount-point "/boot/efi")
		       (device (uuid "6065-21B4" 'fat32))
		       (type "vfat"))
		     (file-system
		       (mount-point "/")
		       (device "/dev/mapper/luks-f99a8f6d-23fd-43d9-a9fd-6e08f286e3b8")
		       (options (alist->file-system-options
				 `(("subvol" . "@"))))
		       (type "btrfs")
		       (dependencies mapped-devices))
		     ;; (file-system
		     ;;  (mount-point "/boot/efi")
		     ;;  (type "vfat")
		     ;;  (device (file-system-label "EFI")))
		     ;; (file-system
		     ;;  (mount-point "/")
		     ;;  (type "ext4")
		     ;;  (device (file-system-label "guix")))
		     ;; CTU
		     ;; (file-system
		     ;;  (device "//drive.fit.cvut.cz/home/zacekmi2")
		     ;;  (mount-point "/fit")
		     ;;  (title 'fit-cifs)
		     ;;  (options "sec=ntlmv2i,fsc,file_mode=0700,dir_mode=0700,uid=1000,user=zacekmi2")
		     ;;  (type "cifs")
		     ;;  (mount? #f)
		     ;;  (create-mount-point? #t))
		     %base-file-systems))
      (swap-devices
       (list (swap-space
	      (target (uuid "a5651b6e-bde2-4a69-ad0a-5857abd8448e")))))))
#+END_SRC

**** Hurd

#+begin_src scheme
  (define-public startide
    (operating-system
      (host-name "startide")
      (file-systems %base-file-systems)
      (kernel hurd)
      (locale "en_US.utf8")
      (timezone "Europe/Prague")
      (keyboard-layout
       (keyboard-layout "us,cz" ",ucw" #:options
			'("grp:caps_switch" #;"ctrl:nocaps" "grp_led"
			  "lv3:ralt_switch" "compose:rctrl-altgr")))
      (users (cons* (user-account
		     (name "michal_atlas")
		     (comment "Michal Atlas")
		     (group "users")
		     (home-directory "/home/michal_atlas")
		     (supplementary-groups
		      '("wheel" "netdev" "audio" "video")))
		    %base-user-accounts))
      (bootloader
       (bootloader-configuration
	(bootloader grub-efi-bootloader)
	(targets `("/boot/efi"))))
      (name-service-switch %mdns-host-lookup-nss)))
#+end_src

*** Machine Selection

#+BEGIN_SRC scheme
  (assoc-ref
   `(("dagon" . ,dagon)
     ("hydra" . ,hydra))
   (vector-ref (uname) 1))
#+end_src

** Home
:PROPERTIES:
:header-args+: :tangle home.scm
:END:

*** Imports

#+begin_src scheme
  (use-modules
   (gnu home)
   (gnu home services)
   (gnu home services shells)
   (gnu home services shepherd)
   (gnu home services ssh)
   (gnu home services fontutils)
   (gnu home services guix)
   (gnu home services desktop)
   (gnu services)
   (gnu packages)
   (gnu packages admin)
   (gnu packages emacs)
   (gnu packages password-utils)
   (gnu packages wm)
   (gnu packages xdisorg)
   (gnu packages python-xyz)
   (gnu packages freedesktop)
   (gnu packages shellutils)
   (gnu services xorg)
   (gnu packages mpd)
   (gnu packages lisp)
   (gnu packages curl)
   (gnu home services mcron)
   (ice-9 hash-table)
   (gnu system keyboard)
   (guix gexp)
   (guix base64)
   (guix download)
   (guix channels)
   (guix modules)
   (guix monads)
   (guix store)
   (guix derivations)
   (ice-9 match)
   (gnu packages gnome)
   (guix packages)
   (guix build-system copy)
   (guix download)
   (gnu services configuration)
   (gnu packages package-management)
   (guix records))
#+END_SRC

*** Custom Services

#+BEGIN_SRC scheme
  (define (file-fetch url hash)
    (file-append
     (package
       (name "file-fetch")
       (version "1")
       (source
	(origin
	  (method url-fetch)
	  (uri url)
	  (file-name "file")
	  (sha256 (base64 hash))))
       (build-system copy-build-system)
       (description "")
       (synopsis "")
       (home-page url)
       (license #f))
     "/file"))
#+END_SRC

**** Dconf

#+BEGIN_SRC scheme
  (define (alist-value-print value)
    (define (list-vals lv) (string-join (map alist-value-print lv) ", "))
    (match value
      [#t "true"]
      [#f "false"]
      [(? string? str) (format #f "'~a'" str)]
      [(entries ...)
       (format #f "(~a)" (list-vals entries))]
      [#(entries ...)
       (format #f "[~a]" (list-vals entries))]
      [v (format #f "~a" v)]))

  (define (alist->ini al)
    (string-concatenate
     (map
      (match-lambda
	[(top-level-path entries ...)
	 (format #f "[~a]~%~a~%" top-level-path
		 (string-concatenate
		  (map
		   (match-lambda
		     [(var value)
		      (format #f "~a=~a~%" var
			      (alist-value-print value))])
		   entries)))])
      al)))


  (define (dconf-load-gexp settings)
    #~(begin
	 (use-modules (ice-9 popen))
	 (let ([dc-pipe (open-pipe* OPEN_WRITE #$(file-append dconf "/bin/dconf") "load" "/")])
	   (display #$(alist->ini settings) dc-pipe))))

  (define dconf-load-service-type
    (service-type (name 'dconf-load-service)
		  (extensions
		   (list
		    (service-extension
		     home-activation-service-type
		     dconf-load-gexp)))
		  (default-value '())
		  (description "Loads an Alist of INI Dconf entries on activation")))
#+END_SRC

**** Nix

#+BEGIN_SRC scheme
  (define (nix-profile-gexp configuration)
    #~ (primitive-load #$ (nix-profile configuration)))

  (define (nix-profile configuration)
    (program-file
     "nix-profile-setup"
     #~ (begin
	  (let ([profile-file "/home/michal_atlas/.nix-profile"])
	    (invoke "nix"
		    "profile" "remove" ".*"
		    "--extra-experimental-features" "nix-command flakes"
		    "--profile" profile-file "--impure")
	    (setenv "NIXPKGS_ALLOW_UNFREE" "1")
	    (invoke "nix"
		    "profile" "install"
		    "--extra-experimental-features" "nix-command flakes"
		    "--impure" "--profile" profile-file
		    #$@configuration)))))

  (define nix-profile-service-type
    (service-type (name 'nix-profile-service)
		  (extensions
		   (list
		    (service-extension
		     home-activation-service-type
		     nix-profile-gexp)))
		  (default-value #f)
		  (description "")))
#+END_SRC

*** Home Environment

#+BEGIN_SRC scheme
    (home-environment
     (services
      (list
       (service dconf-load-service-type
		`((org/gnome/shell
		   (disable-user-extensions #f)
		   (enabled-extensions
		    #("launch-new-instance@gnome-shell-extensions.gcampax.github.com"
		      "drive-menu@gnome-shell-extensions.gcampax.github.com"
		      "workspace-indicator@gnome-shell-extensions.gcampax.github.com"
		      "appindicatorsupport@rgcjonas.gmail.com"
		      "nightthemeswitcher@romainvigier.fr"
		      "gnome-extension-all-ip-addresses@havekes.eu"
		      "color-picker@tuberry"
		      "espresso@coadmunkee.github.com"
		      "gnome-clipboard@b00f.github.io")))
		  (org/gnome/desktop/peripherals/touchpad
		   (tap-to-click #t))
		  (org/gnome/settings-daemon/plugins/media-keys
		   (custom-keybindings
		    #("/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/"
		      "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/")))
		  (org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0
		   (binding "<Super>t")
		   (command "emacsclient -c -e \\'(eshell-new)\\'")
		   (name "TERM"))

		  (org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1
		   (binding "<Super>Return")
		   (command "emacsclient -c")
		   (name "EMACS"))

		  (org/gnome/desktop/background
		   (picture-uri "/home/michal_atlas/.light-wallpaper.png")
		   (picture-uri-dark "/home/michal_atlas/.dark-wallpaper.png"))

		  (org/gnome/desktop/input-sources
		   (sources #(("xkb" "us") ("xkb" "cz+ucw")))
		   (xkb-options #("grp:caps_switch" "lv3:ralt_switch"
				  "compose:rctrl-altgr")))

		  (org/gnome/system/location
		   (enabled #t))

		  (org/gnome/shell/extensions/nightthemeswitcher/time
		   (manual-schedule #f))

		  (org/gnome/desktop/wm/preferences
		   (focus-mode "sloppy"))

		  (org/gnome/settings-daemon/plugins/color
		   (night-light-enabled #t))))

       (service home-shepherd-service-type
		(home-shepherd-configuration
		 (services
		  (list
		   (shepherd-service
		    (provision '(disk-automount))
		    (start #~(make-forkexec-constructor
			      (list #$(file-append udiskie "/bin/udiskie"))))
		    (stop #~(make-kill-destructor)))
		   (shepherd-service
		    (provision '(emacs))
		    (start #~(make-forkexec-constructor
			      (list #$(file-append emacs "/bin/emacs") "--fg-daemon")
			      #:environment-variables
			      (cons*
			       "GDK_SCALE=2"
			       "GDK_DPI_SCALE=0.41"
			       (default-environment-variables))))
		    (stop #~(make-system-destructor
			     "emacsclient -e '(save-buffers-kill-emacs)'")))))))
#+END_SRC

**** Mcron

#+BEGIN_SRC scheme
  (service
   home-mcron-service-type
   (home-mcron-configuration
    (jobs
     (list
      #~(job '(next-minute '(0))
	     (string-append 
	      #$(file-append sbcl "/bin/sbcl")
	      " --script "
	      #$(local-file "files/old-move-script.lisp")))))))
#+END_SRC

#+BEGIN_SRC scheme
	 (simple-service
	  'dotfiles
	  home-files-service-type
	  `(
	    (".dark-wallpaper.png"
	     ,(file-fetch "https://images.alphacoders.com/923/923968.jpg"
			  "DIbte8/pJ2/UkLuojowdueXT5XYz2bns3pIyELXiCnw="))
	    (".light-wallpaper.png"
	     ,(file-fetch "https://ift.tt/2UDuBqa"
			  "i7XCgxwaBYKB7RkpB2nYcGsk2XafNUPcV9921oicRdo="))
	    (".emacs.d/init.el" ,(local-file "files/emacs.el"))
	    (".guile" ,(local-file "files/guile"))
	    (".sbclrc" ,(local-file "files/sbclrc"))
	    ))
	 (simple-service
	  'dotfiles-xdg
	  home-xdg-configuration-files-service-type
	  `(
	    ("common-lisp/source-registry.conf" ,(local-file "files/asdf.lisp"))))
	 #;
	 (service nix-profile-service-type	;
	 (map (lambda (pkg) (string-append "nixpkgs#" pkg)) ;
	 (list "sage"				;
	 "zotero" "acl2-minimal" "discord"	;
	 "dotnet-sdk" "vscode")))   
	 (service
	  home-bash-service-type
	  (home-bash-configuration
	   (guix-defaults? #t)
	   (bashrc
	    (list
	     (mixed-text-file "bashrc-direnv"
			 "eval \"$("
			 (file-append direnv "/bin/direnv")
			 " hook bash)\"")
	     (plain-file "bashrc-ignoredups" "export HISTCONTROL=ignoredups")
	     (mixed-text-file "bashrc-run"
			      "function run { "
			      (file-append guix "/bin/guix")
			      " shell $1 -- $@; }")
	     (mixed-text-file "bashrc-valgrind"
			 "alias valgrind=\""
			 (file-append guix "/bin/guix")
			 " shell -CF valgrind -- valgrind \"")
	     (mixed-text-file "bashrc-fasd" "eval \"$("
			 (file-append fasd "/bin/fasd")
			 " --init auto)\"")
	     (mixed-text-file "bashrc-cheat"
			      "function cheat { "
			      (file-append curl "/bin/curl")
			      " \"cheat.sh/$@\"; }")))
#+END_SRC


**** Bash

***** Aliases

#+NAME: alias-table
| Alias | Command                       |
|-------+-------------------------------|
| gx    | guix                          |
| gxi   | gx install                    |
| gxb   | gx build                      |
| gxs   | gx search                     |
| gxsh  | gx shell                      |
| gxtm  | gx time-machine               |
| e     | $EDITOR                       |
| es    | $EDITOR -nw -e '(eshell-new)' |
| sw    | swayhide                      |
| dd    | dd status=progress            |
| cp    | rsync --progress              |


#+BEGIN_SRC scheme :noweb yes
  (aliases `
   <<table-alist(data=alias-table)>>
   )
#+END_SRC

***** Environment

#+NAME: environment-table
| Variable                    | Value                                                                                               |
|-----------------------------+-----------------------------------------------------------------------------------------------------|
| BROWSER                     | firefox                                                                                             |
| EDITOR                      | emacsclient -n -c                                                                                   |
| TERM                        | xterm-256color                                                                                      |
| MOZ_ENABLE_WAYLAND          | 1                                                                                                   |
| MOZ_USE_XINPUT2             | 1                                                                                                   |
| GRIM_DEFAULT_DIR            | ~/tmp                                                                                               |
| _JAVA_AWT_WM_NONREPARENTING | 1                                                                                                   |
| PATH                        | $PATH:$HOME/.nix-profile/bin/                                                                       |
| PATH                        | $PATH:$HOME/bin/                                                                                    |
| GUILE_LOAD_PATH             | $GUILE_LOAD_PATH:$HOME/bin                                                                          |
| GUILE_LOAD_PATH             | $GUILE_LOAD_PATH:$HOME/dotfiles                                                                     |
| XDG_DATA_DIRS               | $XDG_DATA_DIRS:/var/lib/flatpak/exports/share:/home/michal_atlas/.local/share/flatpak/exports/share |

#+BEGIN_SRC scheme :noweb yes
  (environment-variables `
   <<table-alist(data=environment-table)>>
   )
#+END_SRC

#+BEGIN_SRC scheme
  ))
#+END_SRC

#+BEGIN_SRC scheme :noweb yes
     (service home-channels-service-type
	      <<channels>>
	      )
#+END_SRC

#+BEGIN_SRC scheme
      ;; (service home-provenance-service-type)
      (service home-openssh-service-type
	       (home-openssh-configuration
		(hosts (append
			(list
			 (openssh-host
			  (name "Myst")
			  (host-name "34.122.2.188"))
			 (openssh-host
			  (name "ZmioSem")
			  (user "michal_zacek")
			  (port 10169)
			  (host-name "hiccup.mazim.cz")))
			(map (lambda (q)
			       (openssh-host
				(name (string-append "Fray" q))
				(host-name (string-append "fray" q ".fit.cvut.cz"))
				(user "zacekmi2")
				(host-key-algorithms (list "+ssh-rsa"))
				(accepted-key-types (list "+ssh-rsa"))
				(extra-content "  ControlMaster auto")))
			     '("1" "2"))))
		(authorized-keys (list (local-file "keys/hydra.pub")
				       (local-file "keys/dagon.pub")))))
#+END_SRC

#+BEGIN_SRC scheme
  )))
#+end_src

* Keys
:PROPERTIES:
:header-args+: :comments no
:END:

** Dagon

#+begin_src ascii :tangle keys/dagon.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC1V8JQosSQmV/bJ6nWbJnQKLtiSWSGaBLVWMLYq3diDoKGOnNeS83ES3v1kxPT+F/XIye8B9fzpgLvtWC2Ofl8wpNNsURuTILXc53ei1uCGEvLAg2bwmeCSUtgjV6hH8/PTfCFY2Kne9klq3oY6m8gPxzOjCQa++ihWlat4uLD+E/L1nasy1nf9Nro58iPBu0fT5kw1mr9P4Fxy20pm8LhoEwXYL7BkMs6bNpmB9PgDPRAVcoHdZLCkfkTGMz4XfqTjz5Eliq4Mr8t2/rhR4l/u33kMuSHvI/9OdTCsce3Xymqf6tQizAQJu8bWyb5IWWGqlIld/J6edujvCGnUixxLFqiEznpb9DvwFOT1nhAmNh0fx5c6qYUDlREr7qILcnjjJZnmM5RYzzFKwjp2Ds2mQtic1eQL1huNjuS0AsM1t7lEeqIZwHUxAOxDQgZwXdzVFTTpXJ5SFHUiYMdmHdiHOamXZd96WdCtWJJVWQ1fHPRJTu6DeTCQxg27KTFaT8= michal_atlas@dagon
#+end_src

** Hydra

#+begin_src ascii :tangle keys/hydra.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKTYuh5bYyuSHU1FlW//z1oW1fd64CNQV+Rxq4nPZdtf5+qUgP2IujebxdxDMOubYcBAKweDNpp2V4aDd7Y9OH7UaeuH3ZWs5qbLUqHurOdt30e1tcUZWMqvGQ1BLlm29T+XIdn37aaBv+sMcfMP7ziNIMl8CujM1+apN35qjrBEZHs0Eyue5ymt7C7ClcpC2iHJVk68xkdfNsGOhUkuD5o6KiQF9yFWOU21XqoQqBUYkburFWBEPTGxWtKQItz7nXW/+RbmEhmrT/FuVd5+bzK1rR52Fv5MEbfiV92OntoY4T7gigDR0JBC30aXK2BXBp3yBeaEBGodiSa52/y1kDH2qqRqs1Kz7oP2X34INi6rA5muhDGn2Qg9uwu5Qt1jUkLx+cOv7vdVmvcOFCpgYgdjnC0ETEsEyrDlZumWIAavEZniMw283KkaSYCMdDJlwOcSyVaY2LU4MuPWHUhlx4ot3Hh/m8UGNWwv4zcLr5DxQh6O8d9UIc3oCOgVv0ozM= michal_atlas@hydra
#+end_src

* Files

#+begin_src scheme :tangle files/guile
  (use-modules (ice-9 readline)
	       (ice-9 colorized))
  (activate-readline)
  (activate-colorized)
  (add-to-load-path "/home/michal_atlas/bin")
#+end_src

#+begin_src lisp :tangle files/sbclrc
(require :asdf)
(asdf:load-system :linedit)

;;; Check for --no-linedit command-line option.
(if (member "--no-linedit" sb-ext:*posix-argv* :test 'equal)
    (setf sb-ext:*posix-argv* 
	        (remove "--no-linedit" sb-ext:*posix-argv* :test 'equal))
    (when (interactive-stream-p *terminal-io*)
      (linedit:install-repl :wrap-current t :eof-quits t)
      (funcall (intern "INSTALL-REPL" :linedit) :wrap-current t)))
#+end_src

#+begin_src lisp :tangle files/asdf.lisp
(:source-registry
 (:tree (:home #p"cl/systems"))
 :inherit-configuration)
#+end_src

#+begin_src lisp :tangle files/old-move-script.lisp
(require 'asdf)
(asdf:load-systems :local-time
		   :cl-fad
		   :osicat)

(defun home/ (dir)
  (uiop:merge-pathnames*
   dir
   (user-homedir-pathname)))

(defvar *tmp-log-dir* (home/ #p"tmp-log/"))

(defvar time-cache nil)
(defun get-time () (or time-cache (setf time-cache (local-time:now))))

(defun make-tmp-path (type)
  (uiop:merge-pathnames*
   (make-pathname
    :directory
    `(:relative
      ,(format nil
	       "~a.~a"
	       (local-time:format-timestring
		nil (get-time)
		:format local-time:+rfc3339-format/date-only+)
	       type)))
   *tmp-log-dir*))

(defun walker (from-dir to-dir)
  (lambda (file)
    (let ((mtime (osicat-posix:stat-mtime (osicat-posix:stat file)))
	  (dest-file (uiop:merge-pathnames*
		      (uiop:enough-pathname file from-dir)
		      to-dir)))
      (when (local-time:timestamp<
	     (local-time:unix-to-timestamp mtime)
	     (local-time:timestamp- (get-time) 1 :day))
	(ensure-directories-exist dest-file)
	(rename-file file dest-file)))))

(defun delete-empty (dir)
  (when (null (fad:list-directory dir))
    (uiop:delete-empty-directory dir)))

(defun backup-files (from-dir name)
  (let ((to-dir (make-tmp-path name)))
    (fad:walk-directory
     from-dir (walker from-dir to-dir)
     :FOLLOW-SYMLINKS nil)
    (fad:walk-directory
     from-dir #'delete-empty
     :directories :depth-first
     :test
     (lambda (dir)
       (and (fad:directory-pathname-p dir)
	    (not (uiop:pathname-equal dir from-dir))))
     :FOLLOW-SYMLINKS nil)))

(backup-files (home/ #p"Downloads/") "down")
(backup-files (home/ #p"tmp/") "tmp")
#+end_src

** Emacs
:PROPERTIES:
:header-args+: :tangle files/emacs.el
:END:

*** Org-mode

#+begin_src emacs-lisp

;; (use-package org-fragtog
;;   :hook (org-mode org-fragtog-mode))
(use-package org-modern :hook (org-mode . org-modern-mode))
(org-babel-do-load-languages
 'org-babel-load-languages
 '((C . t)
   (scheme . t)
   (dot . t)
   (lisp . t)))

#+end_src

*** Variable Init

#+begin_src emacs-lisp

(setq
 user-full-name "Michal Atlas"
 user-mail-address "michal_atlas+emacs@posteo.net")
;; (setq user-full-name "Michal Žáček"
;;       user-mail-address "zacekmi2@fit.cvut.cz"

(setq mastodon-instance-url "https://lgbtcz.social")
(setq mastodon-active-user "michal_atlas")
(setq indent-tabs-mode nil)

(setq backup-directory-alist '((".*" . "~/.emacs.d/bkp")))
(setq projectile-project-search-path
      (list "~/Documents" "~/source" "~/cl"))
(setq org-roam-directory "/home/michal_atlas/roam")
(setq enable-local-variables :all)
(setq calendar-week-start-day 1)
(setq org-agenda-start-on-weekday 1)
(setq find-function-C-source-directory "~/source/emacs")
(global-auto-revert-mode 1)
(recentf-mode 1)
(setq visible-bell t)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
(run-at-time nil (* 10 60) 'recentf-save-list)
(global-prettify-symbols-mode +1)

(defun yes-or-no-p (prompt)
  (y-or-n-p prompt))
;(dired-async-mode 1)
(setq auth-sources '("~/.authinfo.gpg"))

#+end_src

*** Scrolling

#+begin_src emacs-lisp

(setq
 scroll-step 1
 scroll-conservatively 10000
 auto-window-vscroll nil
 scroll-margin 8)

;;; Scrolling.
;; Good speed and allow scrolling through large images (pixel-scroll).
;; Note: Scroll lags when point must be moved but increasing the number
;;       of lines that point moves in pixel-scroll.el ruins large image
;;       scrolling. So unfortunately I think we'll just have to live with
;;       this.
;; (pixel-scroll-mode 0)
;; (setq pixel-dead-time 0 ; Never go back to the old scrolling behaviour.
;;       pixel-resolution-fine-flag t ; Scroll by number of pixels instead of lines (t = frame-char-height pixels).
;;       mouse-wheel-scroll-amount '(1) ; Distance in pixel-resolution to scroll each mouse wheel event.
;;       mouse-wheel-progressive-speed nil) ; Progressive speed is too fast for me.
#+end_src

*** WindMove

#+begin_src emacs-lisp
  (windmove-default-keybindings)
  (global-set-key (kbd "s-<up>") #'windmove-swap-states-up)
  (global-set-key (kbd "s-<down>") #'windmove-swap-states-down)
  (global-set-key (kbd "s-<left>") #'windmove-swap-states-left)
  (global-set-key (kbd "s-<right>") #'windmove-swap-states-right)
#+end_src

*** Theming 

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (show-paren-mode 1)
  (column-number-mode 1)
  (display-battery-mode 1)
  (setq display-time-24hr-format t)
  (display-time-mode 1)
  (setq inhibit-startup-screen t)
  (global-display-line-numbers-mode)
  (global-hl-line-mode 1)

  (use-package
   highlight-indentation
   :hook (prog-mode . highlight-indentation-mode)
   :custom (highlight-indent-guides-method 'bitmap))

  (defvar font-code "Fira Code 12")
  (set-frame-font font-code nil t)
  ;; Loads font when opening new frames
  (add-to-list 'default-frame-alist `(font . ,font-code))
  ;; (use-package fira-code-mode :config (global-fira-code-mode))

  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)

  ;; (use-package mode-icons :config (mode-icons-mode 1))
  ;; (elpaca-wait)
  (use-package direnv :config (direnv-mode t))
#+end_src

*** Theme

**** Modus Vivendi
#+begin_src emacs-lisp :tangle no
  (setq
   modus-themes-subtle-line-numbers t
   modus-themes-mode-line '(accented)
   modus-themes-syntax '(yellow-comments)
   modus-themes-paren-match '(bold intense)
   modus-themes-prompts '(intense)
   modus-themes-region '(no-extend bg-only accented)
   modus-themes-bold-constructs t
   modus-themes-hl-line '(accented intense))
#+end_src

**** Gruvbox

#+begin_src emacs-lisp :tangle no
  (use-package gruvbox-theme :config (load-theme 'gruvbox-dark-hard t))
#+end_src

**** Monokai

#+begin_src emacs-lisp
  (use-package monokai-theme :config (load-theme 'monokai t))
#+end_src

*** Modeline

#+begin_src emacs-lisp
  (use-package doom-modeline :init (doom-modeline-mode 1))
#+end_src

*** Completion

#+begin_src emacs-lisp
  (global-set-key [remap dabbrev-expand] 'hippie-expand)
#+end_src

*** Tramp

#+begin_src emacs-lisp
  (setq tramp-default-method "ssh")
#+end_src

*** Packages 

#+begin_src emacs-lisp

  (use-package which-key :config (which-key-mode))
  (setq which-key-popup-type 'minibuffer)

  (use-package
   rainbow-identifiers
   :hook (prog-mode . rainbow-identifiers-mode))
  (use-package
   rainbow-delimiters
   :hook (prog-mode . rainbow-delimiters-mode))

  (set-default 'preview-scale-function 1.5)

  (repeat-mode 1)

  (use-package
   undo-tree
   :config
   (global-undo-tree-mode 1)
   (setq undo-tree-auto-save-history t)
   (setq undo-tree-history-directory-alist
	 '(("." . "~/.emacs.d/undo"))))

  (use-package ace-window :bind ("M-o" . ace-window))
#+end_src

*** Eshell

#+begin_src emacs-lisp
  (use-package
   eshell-prompt-extras
   :config
   (with-eval-after-load "esh-opt"
     (autoload 'epe-theme-lambda "eshell-prompt-extras")
     (setq
      eshell-highlight-prompt nil
      eshell-prompt-function 'epe-theme-lambda)))

  (defun eshell-new ()
    "Open a new instance of eshell."
    (interactive)
    (eshell 'N))


  (add-hook
   'eshell-mode-hook
   (defun my-eshell-mode-hook ()
     (require 'eshell-z)))

  (require 'eshell)
  (use-package
   eshell-syntax-highlighting
   :config (eshell-syntax-highlighting-global-mode 1))
  (setq eshell-review-quick-commands nil)
  (require 'esh-module) ; require modules
  (add-to-list 'eshell-modules-list 'eshell-tramp)
  ;; (use-package
  ;;  esh-autosuggest
  ;;  :hook (eshell-mode . esh-autosuggest-mode))

  (use-package eat)
  (use-package eshell-fringe-status)
  (use-package eshell-vterm)
  (use-package eshell-info-banner)
  (use-package fish-completion)
  (use-package eshell-did-you-mean)
#+END_SRC

*** LSP

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package
    lsp-mode
    :bind ("C-c c" . compile)
    :custom (lsp-keymap-prefix "C-c l")
    :hook
    (lsp-mode . lsp-enable-which-key-integration)
    (c-mode . lsp)
    (c++-mode . lsp))
#+END_SRC

*** Eglot

#+BEGIN_SRC emacs-lisp
(use-package
  eglot
  :bind
  ("C-c c" . compile)
  ("C-c l =" . eglot-format-buffer))

(add-hook 'c-mode-hook 'eglot-ensure)
(add-hook 'c++-mode-hook 'eglot-ensure)

(use-package git-gutter :config (global-git-gutter-mode +1))

;; Persist history over Emacs restarts. Vertico sorts by history position.

;(use-package savehist :init (savehist-mode))

;; Configure directory extension.

(use-package
 anzu
 :config (global-anzu-mode +1)
 :bind
 (("M-%" . anzu-query-replace) ("C-M-%" . anzu-query-replace-regexp)))

(use-package marginalia :config (marginalia-mode))

(setq org-agenda-files '("~/roam/todo.org"))
#+end_src

*** Roam

#+begin_src emacs-lisp :tangle no
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/roam/"))
    (org-roam-capture-templates
     '(
       ("d" "default" plain "%?" :target
	(file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}
    ")
	:unnarrowed t)
       ("p" "people" plain "%?" :target
	(file+head "people/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}
    ")
	:unnarrowed t)
       ("f" "food" plain "%?" :target
	(file+head "food/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}
    ")
	:unnarrowed nil)
       ))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ;; Dailies
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))
  (use-package org-roam-ui
    :after org-roam
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    ;; :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
	  org-roam-ui-follow t
	  org-roam-ui-update-on-save t
	  org-roam-ui-open-on-start t))
#+end_src

*** Langs

#+begin_src emacs-lisp
(global-company-mode 1)
#+end_src

*** Lisps

#+begin_src emacs-lisp
(use-package geiser :hook (scheme-mode geiser-mode))

(use-package
  paredit
  :hook ((emacs-lisp-mode . paredit-mode)
	 ;; (eval-expression-minibuffer-setup . paredit-mode)
	 (scheme-mode . paredit-mode)
	 (lisp-mode . paredit-mode)))

;; (add-hook 'paredit-mode-hook #'lispy-mode)
;; (add-hook 'emacs-lisp-mode-hook
;;   (lambda ()
;;     (require 'elisp-autofmt)
;;     (elisp-autofmt-save-hook-for-this-buffer t)))

(use-package
  multiple-cursors
  :bind
  (("C-S-c C-S-c" . mc/edit-lines)
   ("C->" . mc/mark-next-like-this)
   ("C-<" . mc/mark-previous-like-this)
   ("C-c C-<" . mc/mark-all-like-this)))
#+end_src

*** C

#+begin_src emacs-lisp
(add-hook 'shell-script-mode 'prog-mode)
#+end_src

*** Elfeed

#+begin_src emacs-lisp
(setq
 elfeed-feeds
 '(("https://xkcd.com/rss.xml" comics)
   ("https://www.smbc-comics.com/comic/rss" comics)
   ("https://www.giantitp.com/comics/oots.rss" comics)
   ("https://feeds.feedburner.com/LookingForGroup" comics)
   ("https://www.oglaf.com/" comics)
   ("http://phdcomics.com/gradfeed.php" comics)
   ("https://blog.tecosaur.com/tmio/rss.xml" emacs)
   ("http://festivalofthespokennerd.libsyn.com/rss" podcast)
   ("https://guix.gnu.org/feeds/blog.atom" tech linux)
   ("https://vkc.sh/feed/" tech linux)
   ("https://www.youtube.com/feeds/videos.xml?channel_id=UCMiyV_Ib77XLpzHPQH_q0qQ") ;; Veronica
   ("https://www.youtube.com/feeds/videos.xml?channel_id=UCQ6fPy9wr7qnMxAbFOGBaLw") ;; Computer Clan
   ("https://lexfridman.com/feed/podcast/")))
#+end_src

*** Misc

#+begin_src emacs-lisp
(use-package
 magit
 :bind
 (("C-c v s" . magit-stage)
  ("C-c v p" . magit-push)
  ("C-c v f" . magit-pull)
  ("C-c v c" . magit-commit)
  ("C-x g" . magit))
 :init
 (if (not (boundp 'project-switch-commands))
     (setq project-switch-commands nil)))
; (use-package helpful
;   :bind (("C-h f" . helpful-function)
;	 ("C-h k" . helpful-key)))

(use-package avy :bind ("C-c q" . avy-goto-char-timer))
(use-package
 browse-kill-ring
 :config (browse-kill-ring-default-keybindings))
#+END_SRC

*** EMMS

#+BEGIN_SRC emacs-lisp :tangle no
(use-package
 emms
 :config
 (require 'emms-setup)
 (emms-all)
 (emms-default-players)
 (setq emms-source-file-default-directory "~/Music/")
 (setq-default
  emms-source-file-default-directory "~/Music/"

  emms-source-playlist-default-format 'native
  emms-playlist-mode-center-when-go t
  emms-playlist-default-major-mode 'emms-playlist-mode
  emms-show-format "NP: %s"

  emms-player-list '(emms-player-mpv)
  emms-player-mpv-environment '("PULSE_PROP_media.role=music")
  emms-player-mpv-parameters
  '("--quiet"
    "--really-quiet"
    "--no-video"
    "--no-audio-display"
    "--force-window=no"
    "--vo=null")))
#+end_src

*** Thaumiel 

#+begin_src emacs-lisp

;      (straight-use-package '(thaumiel :local-repo "thaumiel" :repo "michal_atlas/thaumiel"))

#+end_src

*** Matrix

#+begin_src emacs-lisp


#+end_src

*** Tramp

#+begin_src emacs-lisp
(use-package
 tramp
 :elpaca nil
 :config
 (connection-local-set-profile-variables
  'guix-system '((tramp-remote-path . (tramp-own-remote-path))))

 (setq tramp-remote-path
       (append tramp-remote-path '(tramp-own-remote-path)))

 (connection-local-set-profiles
  `(:application
    tramp
    :protocol "sudo"
    :machine ,(system-name))
  'guix-system))
#+END_SRC

*** Desktop

#+BEGIN_SRC emacs-lisp
(defun light/up ()
  (interactive)
  (shell-command "light -A 10")
  (light/show))

(defun light/down ()
  (interactive)
  (shell-command "light -U 10")
  (light/show))

(defun light/show ()
  (princ
   (concat
    "Brightness..."
    (string-trim (shell-command-to-string "light -G"))
    "%")))

(defun volume/up ()
  (interactive)
  (shell-command "pactl set-sink-volume @DEFAULT_SINK@ +5%")
  (volume/show))

(defun volume/down ()
  (interactive)
  (shell-command "pactl set-sink-volume @DEFAULT_SINK@ -5%")
  (volume/show))

(defun volume/mute ()
  (interactive)
  (shell-command "pactl set-sink-mute @DEFAULT_SINK@ toggle")
  (volume/show))

(defun volume/show ()
  (princ
   (funcall (-cut string-join <> (string ?\n))
            (mapcar
             (-compose #'string-trim #'shell-command-to-string)
             '("pactl get-sink-mute @DEFAULT_SINK@"
               "pactl get-sink-volume @DEFAULT_SINK@")))))

(defun player/play ()
  (interactive)
  (shell-command "playerctl play-pause"))
(defun player/next ()
  (interactive)
  (shell-command "playerctl next"))
(defun player/prev ()
  (interactive)
  (shell-command "playerctl previous"))

(global-set-key
 (kbd "s-<return>")
 (lambda ()
   (interactive)
   (start-process-shell-command "kitty" nil "kitty")))

(use-package embark :bind ("C-." . embark-act))
(use-package embark-consult)
#+END_SRC

*** EXWM

#+BEGIN_SRC emacs-lisp :tangle no
  ;; exwm-workspace-minibuffer-position 'top
  (use-package
    exwm
    :custom (exwm-workspace-number 10)
    :bind ("C-M-l" . (lambda ()
		       (interactive)
		       (shell-command "slock")))
    :config (add-hook
	     'exwm-update-class-hook
	     (lambda ()
	       (exwm-workspace-rename-buffer
		exwm-class-name)))
    (require 'exwm-systemtray)
    (exwm-systemtray-enable)
    (set-frame-parameter
     (selected-frame)
     'alpha
     '(85 . 85))
    (add-to-list
     'default-frame-alist
     '(alpha . (85 . 85)))
    (dolist (cmd
	     '("nm-applet"
	       "pasystray"
	       ("xss-lock" . "xss-lock -- xlock")))
      (if (listp cmd)
	  (start-process-shell-command
	   (car cmd)
	   nil
	   (cdr cmd))
	(start-process-shell-command
	 (file-name-nondirectory cmd)
	 nil
	 cmd)))
    (setq exwm-workspace-show-all-buffers
	  t
	  exwm-input-prefix-keys
	  `(?\C-x
	    ?\C-u
	    ?\C-h
	    ?\M-x
	    ?\M-`
	    ?\M-&
	    ?\M-:)
	  exwm-input-simulation-keys
	  '(([?\C-b] . [left])
	    ([?\C-f] . [right])
	    ([?\C-p] . [up])
	    ([?\C-n] . [down])
	    ([?\C-a] . [home])
	    ([?\C-e] . [end])
	    ([?\M-v] . [prior])
	    ([?\C-v] . [next])
	    ([?\C-d] . [delete])
	    ([?\C-k] . [S-end delete])
	    ([?\C-s] . [C-f])
	    ([?\C-y] . [C-v])
	    ([?\M-w] . [C-x C-v]))
	  exwm-input-global-keys
	  `(([?\s-&] . (lambda (command)
			 (interactive (list
				       (read-shell-command "$ ")))
			 (start-process-shell-command
			  command
			  nil
			  command)))
	    ([?\s-w] . exwm-workspace-switch)
	    (,(kbd "<XF86AudioPlay>") . player/play)
	    (,(kbd "<XF86AudioNext>") . player/next)
	    (,(kbd "<XF86AudioPrev>") . player/prev)
	    (,(kbd "<XF86AudioRaiseVolume>") . volume/up)
	    (,(kbd "<XF86AudioLowerVolume>") . volume/down)
	    (,(kbd "<XF86AudioMute>") . volume/mute)
	    (,(kbd "<XF86MonBrightnessUp>") . light/up)
	    (,(kbd "<XF86MonBrightnessDown>") . light/down)
	    (,(kbd "s-l") . lock-screen)
	    (,(kbd "s-d") . dmenu)
	    (\,
	     @
	     (mapcar
	      (lambda (i)
		`(,(kbd (format "s-%d" i)) . (lambda ()
					       (interactive)
					       (exwm-workspace-switch-create
						,i))))
	      (number-sequence 0 9)))
	    (\,
	     @
	     (mapcar
	      (lambda (i)
		`(,(kbd (format "M-s-%d" i)) . (lambda ()
						 (interactive)
						 (eshell ,i))))
	      (number-sequence 0 9)))))
    (define-key exwm-mode-map [?\C-q]
      'exwm-input-send-next-key)
    (defun efs/configure-window-by-class ()
      (interactive)
      (pcase
	  exwm-class-name
	("Firefox"
	 (exwm-workspace-move-window 3))
	("mpv"
	 (exwm-workspace-move-window 7))))
    (add-hook
     'exwm-manage-finish-hook
     #'efs/configure-window-by-class)
    (exwm-enable))
#+END_SRC

*** Vertico

#+begin_src emacs-lisp
  (use-package
    vertico
    :init (vertico-mode)
    :custom (vertico-count 20)
    (vertico-resize t)
    (enable-recursive-minibuffers
     t))

  (use-package
   orderless
   :init
   (setq
    completion-styles '(orderless basic)
    completion-category-defaults nil
    completion-category-overrides '((file (styles partial-completion)))))

  (global-unset-key (kbd "C-r"))
  (use-package
   consult
   :bind
   (("C-x b" . consult-buffer)
    ("C-t" . consult-goto-line)
    ("C-s" . consult-line)
    ("C-r l" . consult-register)
    ("C-r s" . consult-register-store)
    ("M-y" . consult-yank-from-kill-ring)))

  (defun close-program ()
    (interactive)
    (kill-buffer)
    (delete-frame))

  (global-set-key (kbd "C-s-q") #'close-program)

  (setq vterm-new--i 0)
  (defun vterm-new ()
    (interactive)
    (vterm (setq vterm-new--i (1+ vterm-new--i))))

  ;; (use-package xah-fly-keys
  ;; :config
  ;; (xah-fly-keys-set-layout "qwerty"))

  ;; (use-package frames-only-mode
  ;;   :config (frames-only-mode 1))

  (defun flatpak-run ()
    (interactive)
    (async-shell-command (concat
			  "flatpak run "
			  (completing-read
			   "Run Flatpak: "
			   (mapcar
			    #'(lambda (q)
				(let ((stf
				       (-take 2 (split-string q "\t"))))
				  `(,(cadr stf) . ,(car stf))))
			    (delete
			     ""
			     (split-string (shell-command-to-string
					    "flatpak list --app")
					   "\n")))))
			 "flatpaks"))

  (defhydra hydra-system (global-map "C-c s")
    "system"
    ("p" player/play "Play")
    ("o" player/next "Next")
    ("i" player/prev "Prev")
    ("e" light/up "Br. Up")
    ("d" light/down "Br. Down")
    ("r" volume/up "Vol. Up")
    ("f" volume/down "Vol. Down")
    ("m" volume/mute "Mute"))

  (defhydra hydra-launcher (global-map "C-c r" :color purple :exit t)
   "Launch"
   ("r" (browse-url "http://www.reddit.com/r/emacs/") "reddit")
   ("w" (browse-url "http://www.emacswiki.org/") "emacswiki")
   ("f" (start-process-shell-command "firefox" nil "firefox") "firefox")
   ("d" (start-process-shell-command
     "discord" nil "flatpak run com.discordapp.Discord")
    "discord")
   ("s" shell "shell")
   ("e" eshell "eshell")
   ("l"
    (start-process-shell-command "lagrange" nil "lagrange")
    "lagrange")
   ("g" guix-packages-by-name "find package")
   ("q" nil "cancel"))

  (defhydra
   hydra-buffer
   (global-map "C-x")
   ("<right>" next-buffer)
   ("<left>" previous-buffer))
#+end_src

*** Guile scripts

#+begin_src emacs-lisp
(setq guile-script-path '("~/dotfiles/scripts"))

(defun guile/script-launcher ()
  (interactive)
  (print
   (let* ((script-list
           (peek
            (mapcar
             (lambda (q) `(,(f-filename q) . ,q))
             (apply #'append
                    (mapcar
                     (lambda (q)
                       (directory-files
                        q
                        t directory-files-no-dot-files-regexp))
                     guile-script-path)))))
          (comp (completing-read "Run Script: " script-list)))
     (async-shell-command (alist-get comp script-list nil nil #'equal)
                          (concat "guile:" comp)))))

(defun peek (x)
  (print x)
  x)

(use-package frame :elpaca nil :bind ("C-z" . nil))

(defun init-unlink ()
  (interactive)
  (f-delete "~/.emacs.d/init.el")
  (f-symlink
   (expand-file-name "~/cl/dotfiles/files/emacs.el")
   "~/.emacs.d/init.el"))

(use-package pretty-sha-path :config (global-pretty-sha-path-mode))

(use-package keychain-environment
  :config (keychain-refresh-environment))

(defun atlas/get-address ()
  (let ((av 
	 (cdr
	  (--find (equal "wlp1s0" (car it))
		  (--filter
		   (= (length (cdr it)) 5)
		   (network-interface-list))))))
    (cl-loop for i to 4
	     collect (aref av i) into l
	     finally (return (apply #'format "%s.%s.%s.%s" l)))))

(defun atlas/print-address ()
  (interactive)
  (princ (atlas/get-address)))

(defun lock-screen ()
  (interactive)
  (shell-command "xlock" nil nil))

(defun divbat ()
  (string-replace ":" "/"
   (apply
    #'calc-eval "fdiv(pfrac($),pfrac($$))" nil 
    (mapcar
     (lambda (q) (substring q 25 -3))
     (-drop-last 1 (split-string
		    (shell-command-to-string
		     "upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep -E 'energy(-full)?:'")
		    "\n"))))))
#+end_src

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
